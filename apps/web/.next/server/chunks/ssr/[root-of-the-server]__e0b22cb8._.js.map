{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///Users/itwelaibomu/Desktop/code/agents-2025-dope/apps/web/src/components/providers/theme-provider.tsx"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useEffect, useState } from \"react\"\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\nimport { type ThemeProviderProps } from \"next-themes/dist/types\"\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return (\n    <NextThemesProvider\n      attribute=\"class\"\n      defaultTheme=\"system\"\n      enableSystem\n      disableTransitionOnChange\n      {...props}\n    >\n      {children}\n    </NextThemesProvider>\n  )\n}\n"],"names":[],"mappings":";;;;;AAGA;AAHA;;;AAMO,SAAS,cAAc,EAAE,QAAQ,EAAE,GAAG,OAA2B;IACtE,qBACE,8OAAC,iKAAkB;QACjB,WAAU;QACV,cAAa;QACb,YAAY;QACZ,yBAAyB;QACxB,GAAG,KAAK;kBAER;;;;;;AAGP","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///Users/itwelaibomu/Desktop/code/agents-2025-dope/apps/web/convex/_generated/api.js"],"sourcesContent":["/* eslint-disable */\n/**\n * Generated `api` utility.\n *\n * THIS CODE IS AUTOMATICALLY GENERATED.\n *\n * To regenerate, run `npx convex dev`.\n * @module\n */\n\nimport { anyApi, componentsGeneric } from \"convex/server\";\n\n/**\n * A utility for referencing Convex functions in your app's API.\n *\n * Usage:\n * ```js\n * const myFunctionReference = api.myModule.myFunction;\n * ```\n */\nexport const api = anyApi;\nexport const internal = anyApi;\nexport const components = componentsGeneric();\n"],"names":[],"mappings":"AAAA,kBAAkB,GAClB;;;;;;;CAOC;;;;;;;;AAED;AAAA;AAAA;;AAUO,MAAM,MAAM,gKAAM;AAClB,MAAM,WAAW,gKAAM;AACvB,MAAM,aAAa,IAAA,2MAAiB","debugId":null}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file:///Users/itwelaibomu/Desktop/code/agents-2025-dope/apps/web/src/components/providers/agent-chat-provider.tsx"],"sourcesContent":["\"use client\"\n\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { ConvexHttpClient } from \"convex/browser\";\nimport { api } from \"../../../convex/_generated/api\";\n\ninterface ChatMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  agentName?: string;\n  timestamp: Date;\n  toolCalls?: Array<{\n    name: string;\n    arguments: any;\n    result?: any;\n  }>;\n}\n\ninterface ConversationThread {\n  _id: string;\n  threadId: string;\n  userId?: string;\n  agentId: string;\n  title: string;\n  history: any[];\n  lastUpdated: number;\n  createdAt: number;\n}\n\ninterface AgentChatContextType {\n  // Messages\n  messages: ChatMessage[];\n  setMessages: (messages: ChatMessage[]) => void;\n  addMessage: (message: ChatMessage) => void;\n  \n  // Threads\n  threads: ConversationThread[];\n  currentThreadId: string | null;\n  setCurrentThreadId: (threadId: string | null) => void;\n  loadThreads: (userId?: string) => Promise<void>;\n  createNewThread: () => void;\n  selectThread: (threadId: string) => Promise<void>;\n  deleteThread: (threadId: string) => Promise<void>;\n  \n  // Chat state\n  isLoading: boolean;\n  setIsLoading: (loading: boolean) => void;\n  \n  // Current agent\n  currentAgent: string;\n  setCurrentAgent: (agent: string) => void;\n}\n\nconst AgentChatContext = createContext<AgentChatContextType | undefined>(undefined);\n\nexport const useAgentChat = () => {\n  const context = useContext(AgentChatContext);\n  if (!context) {\n    throw new Error('useAgentChat must be used within an AgentChatProvider');\n  }\n  return context;\n};\n\ninterface AgentChatProviderProps {\n  children: React.ReactNode;\n  userId?: string;\n}\n\nexport const AgentChatProvider: React.FC<AgentChatProviderProps> = ({ \n  children, \n  userId \n}) => {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [threads, setThreads] = useState<ConversationThread[]>([]);\n  const [currentThreadId, setCurrentThreadId] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentAgent, setCurrentAgent] = useState('hermes');\n  \n  // Create convex client once\n  const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);\n\n  // Load threads for user - no callback needed\n  const loadThreads = async (userId?: string) => {\n    if (!userId) return;\n    \n    try {\n      const userThreads = await convex.query(api.threads.getUserThreads, { userId });\n      setThreads(userThreads);\n    } catch (error) {\n      console.error('Error loading threads:', error);\n    }\n  };\n\n  // Create new thread - no callback needed\n  const createNewThread = () => {\n    setCurrentThreadId(null);\n    setMessages([]);\n  };\n\n  // Select and load a thread - no callback needed\n  const selectThread = async (threadId: string) => {\n    try {\n      const thread = await convex.query(api.threads.getThread, { threadId });\n      if (thread) {\n        setCurrentThreadId(threadId);\n        \n        // Convert thread history to messages\n        const threadMessages: ChatMessage[] = thread.history\n          .filter((item: any) => item.role === 'user' || item.role === 'assistant')\n          .map((item: any) => {\n            return {\n              role: item.role,\n              content: item.content || '',\n              agentName: item.agentName,\n              timestamp: new Date(item.timestamp || Date.now()),\n              toolCalls: item.toolCalls,\n            };\n          });\n        setMessages(threadMessages);\n        setCurrentAgent(thread.agentId);\n      }\n    } catch (error) {\n      console.error('Error loading thread:', error);\n    }\n  };\n\n  // Add message to current conversation - no callback needed\n  const addMessage = (message: ChatMessage) => {\n    setMessages(prev => [...prev, message]);\n  };\n\n  // Delete a thread\n  const deleteThread = async (threadId: string) => {\n    try {\n      await convex.mutation(api.threads.deleteThread, { threadId });\n      \n      // Remove from local state\n      setThreads(prev => prev.filter(thread => thread.threadId !== threadId));\n      \n      // If it was the current thread, reset to no thread\n      if (currentThreadId === threadId) {\n        setCurrentThreadId(null);\n        setMessages([]);\n      }\n      \n      // Reload threads to ensure consistency\n      if (userId) {\n        loadThreads(userId);\n      }\n    } catch (error) {\n      console.error('Error deleting thread:', error);\n    }\n  };\n\n  // Load threads on mount\n  useEffect(() => {\n    if (userId) {\n      loadThreads(userId);\n    }\n  }, [userId]);\n\n  // Refresh threads when current thread is updated\n  useEffect(() => {\n    if (userId && currentThreadId) {\n      loadThreads(userId);\n    }\n  }, [currentThreadId, userId]);\n\n  const value: AgentChatContextType = {\n    messages,\n    setMessages,\n    addMessage,\n    threads,\n    currentThreadId,\n    setCurrentThreadId,\n    loadThreads,\n    createNewThread,\n    selectThread,\n    deleteThread,\n    isLoading,\n    setIsLoading,\n    currentAgent,\n    setCurrentAgent,\n  };\n\n  return (\n    <AgentChatContext.Provider value={value}>\n      {children}\n    </AgentChatContext.Provider>\n  );\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///Users/itwelaibomu/Desktop/code/agents-2025-dope/apps/web/src/app/providers/ConvexClientProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport { ConvexProvider, ConvexReactClient } from \"convex/react\";\nimport { ConvexAuthNextjsProvider } from \"@convex-dev/auth/nextjs\";\nimport { ReactNode } from \"react\";\n\nconst convex = new ConvexReactClient('https://original-turtle-96.convex.cloud');\n\nexport default function ConvexClientProvider({ children }: { children: ReactNode }) {\n  return (\n    <ConvexProvider client={convex}>\n      <ConvexAuthNextjsProvider client={convex}>{children}</ConvexAuthNextjsProvider>\n    </ConvexProvider>\n  );\n}\n\n\n\n"],"names":[],"mappings":";;;;;AAEA;AAAA;AACA;AAHA;;;;AAMA,MAAM,SAAS,IAAI,6KAAiB,CAAC;AAEtB,SAAS,qBAAqB,EAAE,QAAQ,EAA2B;IAChF,qBACE,8OAAC,0KAAc;QAAC,QAAQ;kBACtB,cAAA,8OAAC,6MAAwB;YAAC,QAAQ;sBAAS;;;;;;;;;;;AAGjD","debugId":null}}]
}