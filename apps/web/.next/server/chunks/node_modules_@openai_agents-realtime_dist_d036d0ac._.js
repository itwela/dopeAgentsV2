module.exports = [
"[project]/node_modules/@openai/agents-realtime/dist/metadata.mjs [app-route] (ecmascript)", ((__turbopack_context__) => {
"use strict";

// This file is automatically generated
__turbopack_context__.s([
    "METADATA",
    ()=>METADATA,
    "default",
    ()=>__TURBOPACK__default__export__
]);
const METADATA = {
    "name": "@openai/agents-realtime",
    "version": "0.1.3",
    "versions": {
        "@openai/agents-realtime": "0.1.3",
        "@openai/agents-core": "workspace:*"
    }
};
const __TURBOPACK__default__export__ = METADATA;
 //# sourceMappingURL=metadata.mjs.map
}),
"[project]/node_modules/@openai/agents-realtime/dist/utils.mjs [app-route] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "HEADERS",
    ()=>HEADERS,
    "WEBSOCKET_META",
    ()=>WEBSOCKET_META,
    "approvalItemToRealtimeApprovalItem",
    ()=>approvalItemToRealtimeApprovalItem,
    "arrayBufferToBase64",
    ()=>arrayBufferToBase64,
    "base64ToArrayBuffer",
    ()=>base64ToArrayBuffer,
    "diffRealtimeHistory",
    ()=>diffRealtimeHistory,
    "getLastTextFromAudioOutputMessage",
    ()=>getLastTextFromAudioOutputMessage,
    "hasWebRTCSupport",
    ()=>hasWebRTCSupport,
    "realtimeApprovalItemToApprovalItem",
    ()=>realtimeApprovalItemToApprovalItem,
    "removeAudioFromContent",
    ()=>removeAudioFromContent,
    "updateRealtimeHistory",
    ()=>updateRealtimeHistory
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$metadata$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/metadata.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/index.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$items$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/items.mjs [app-route] (ecmascript)");
;
;
function base64ToArrayBuffer(base64) {
    const binaryString = atob(base64);
    const len = binaryString.length;
    const bytes = new Uint8Array(len);
    for(let i = 0; i < len; i++){
        bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes.buffer;
}
function arrayBufferToBase64(arrayBuffer) {
    const binaryString = String.fromCharCode(...new Uint8Array(arrayBuffer));
    return btoa(binaryString);
}
function getLastTextFromAudioOutputMessage(item) {
    if (typeof item === 'undefined' || item === null || typeof item !== 'object' || !('type' in item) || typeof item.type !== 'string' || !item.type) {
        return undefined;
    }
    if (item.type !== 'message') {
        return undefined;
    }
    if (!('content' in item) || !Array.isArray(item.content) || item.content.length < 1) {
        return undefined;
    }
    const lastContentItem = item.content[item.content.length - 1];
    if (!('type' in lastContentItem) || typeof lastContentItem.type !== 'string') {
        return undefined;
    }
    if (lastContentItem.type === 'output_text') {
        return typeof lastContentItem.text === 'string' ? lastContentItem.text : undefined;
    }
    if (lastContentItem.type === 'output_audio') {
        return typeof lastContentItem.transcript === 'string' ? lastContentItem.transcript : undefined;
    }
    return undefined;
}
function diffRealtimeHistory(oldHistory, newHistory) {
    const removals = oldHistory.filter((item)=>!newHistory.some((newItem)=>newItem.itemId === item.itemId));
    const additions = newHistory.filter((item)=>!oldHistory.some((oldItem)=>oldItem.itemId === item.itemId));
    const updates = newHistory.filter((item)=>oldHistory.some((oldItem)=>oldItem.itemId === item.itemId && JSON.stringify(oldItem) !== JSON.stringify(item)));
    return {
        removals,
        additions,
        updates
    };
}
function hasWebRTCSupport() {
    if ("TURBOPACK compile-time truthy", 1) {
        return false;
    }
    //TURBOPACK unreachable
    ;
}
function removeAudioFromContent(item) {
    if (item.role === 'system') {
        return item;
    }
    if (item.role === 'assistant') {
        return {
            ...item,
            content: item.content.map((entry)=>{
                if (entry.type === 'output_audio') {
                    return {
                        ...entry,
                        audio: null
                    };
                }
                return entry;
            })
        };
    }
    if (item.role === 'user') {
        return {
            ...item,
            content: item.content.map((entry)=>{
                if (entry.type === 'input_audio') {
                    return {
                        ...entry,
                        audio: null
                    };
                }
                return entry;
            })
        };
    }
    return item;
}
function updateRealtimeHistory(history, event, shouldIncludeAudioData) {
    // Merge transcript into placeholder input_audio message
    if (event.type === 'conversation.item.input_audio_transcription.completed') {
        return history.map((item)=>{
            if (item.itemId === event.item_id && item.type === 'message' && 'role' in item && item.role === 'user') {
                const updatedContent = item.content.map((entry)=>{
                    if (entry.type === 'input_audio') {
                        return {
                            ...entry,
                            transcript: event.transcript
                        };
                    }
                    return entry;
                });
                return {
                    ...item,
                    content: updatedContent,
                    status: 'completed'
                };
            }
            return item;
        });
    }
    const newEvent = !shouldIncludeAudioData && event.type === 'message' ? removeAudioFromContent(event) : event;
    const existingIndex = history.findIndex((item)=>item.itemId === event.itemId);
    if (existingIndex !== -1) {
        // Update existing item
        return history.map((item, idx)=>{
            if (idx === existingIndex) {
                return newEvent;
            }
            if (!shouldIncludeAudioData && item.type === 'message') {
                return removeAudioFromContent(item);
            }
            return item;
        });
    } else if (event.previousItemId) {
        // Insert after previousItemId if found, else at end
        const prevIndex = history.findIndex((item)=>item.itemId === event.previousItemId);
        if (prevIndex !== -1) {
            return [
                ...history.slice(0, prevIndex + 1),
                newEvent,
                ...history.slice(prevIndex + 1)
            ];
        } else {
            return [
                ...history,
                newEvent
            ];
        }
    } else {
        return [
            ...history,
            newEvent
        ];
    }
}
const HEADERS = {
    'User-Agent': `Agents/JavaScript ${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$metadata$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].version}`,
    'X-OpenAI-Agents-SDK': `openai-agents-sdk.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$metadata$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].version}`
};
const WEBSOCKET_META = `openai-agents-sdk.${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$metadata$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].version}`;
function realtimeApprovalItemToApprovalItem(agent, item) {
    const { name, arguments: args, ...rest } = item;
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$items$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RunToolApprovalItem"]({
        type: 'hosted_tool_call',
        name,
        arguments: JSON.stringify(args),
        status: 'in_progress',
        providerData: {
            ...rest
        }
    }, agent);
}
function approvalItemToRealtimeApprovalItem(item) {
    const { name, arguments: args, providerData } = item.rawItem;
    const { itemId, serverLabel, ...rest } = providerData ?? {};
    if (!itemId || !serverLabel) {
        throw new Error('Invalid approval item for Realtime MCP approval request');
    }
    return {
        type: 'mcp_approval_request',
        itemId,
        serverLabel,
        ...rest,
        name,
        arguments: args ? JSON.parse(args) : {},
        approved: null
    };
} //# sourceMappingURL=utils.mjs.map
}),
"[project]/node_modules/@openai/agents-realtime/dist/realtimeAgent.mjs [app-route] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "RealtimeAgent",
    ()=>RealtimeAgent
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/index.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$agent$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/agent.mjs [app-route] (ecmascript)");
;
class RealtimeAgent extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$agent$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Agent"] {
    /**
     * The voice intended to be used by the agent. If another agent already spoke during the
     * RealtimeSession, changing the voice during a handoff will fail.
     */ voice;
    constructor(config){
        super(config);
        this.voice = config.voice;
    }
} //# sourceMappingURL=realtimeAgent.mjs.map
}),
"[project]/node_modules/@openai/agents-realtime/dist/guardrail.mjs [app-route] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "defineRealtimeOutputGuardrail",
    ()=>defineRealtimeOutputGuardrail,
    "getRealtimeGuardrailFeedbackMessage",
    ()=>getRealtimeGuardrailFeedbackMessage,
    "getRealtimeGuardrailSettings",
    ()=>getRealtimeGuardrailSettings
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/index.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$guardrail$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/guardrail.mjs [app-route] (ecmascript)");
;
function getRealtimeGuardrailSettings(settings) {
    return {
        debounceTextLength: settings.debounceTextLength ?? 100
    };
}
function defineRealtimeOutputGuardrail({ policyHint: policyHintInput, ...options }) {
    const baseGuardrail = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$guardrail$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["defineOutputGuardrail"])(options);
    const policyHint = policyHintInput ?? baseGuardrail.name;
    return {
        ...baseGuardrail,
        policyHint,
        run: async (args)=>{
            const result = await baseGuardrail.run(args);
            return {
                ...result,
                guardrail: {
                    ...result.guardrail,
                    policyHint
                }
            };
        }
    };
}
function getRealtimeGuardrailFeedbackMessage(result) {
    return `
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${result.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(result.output.outputInfo ?? {})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim();
} //# sourceMappingURL=guardrail.mjs.map
}),
"[project]/node_modules/@openai/agents-realtime/dist/logger.mjs [app-route] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "default",
    ()=>__TURBOPACK__default__export__
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/index.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/logger.mjs [app-route] (ecmascript)");
;
const logger = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getLogger"])('openai-agents:realtime');
const __TURBOPACK__default__export__ = logger;
 //# sourceMappingURL=logger.mjs.map
}),
"[project]/node_modules/@openai/agents-realtime/dist/clientMessages.mjs [app-route] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "normalizeAudioFormat",
    ()=>normalizeAudioFormat,
    "toNewSessionConfig",
    ()=>toNewSessionConfig
]);
function isDefined(key, object) {
    // @ts-expect-error fudging with types here for the index types
    return key in object && typeof object[key] !== 'undefined';
}
function isDeprecatedConfig(config) {
    return isDefined('modalities', config) || isDefined('voice', config) || isDefined('inputAudioFormat', config) || isDefined('outputAudioFormat', config) || isDefined('inputAudioTranscription', config) || isDefined('turnDetection', config) || isDefined('inputAudioNoiseReduction', config) || isDefined('speed', config);
}
function toNewSessionConfig(config) {
    if (!isDeprecatedConfig(config)) {
        return {
            model: config.model,
            instructions: config.instructions,
            toolChoice: config.toolChoice,
            tools: config.tools,
            tracing: config.tracing,
            providerData: config.providerData,
            prompt: config.prompt,
            outputModalities: config.outputModalities,
            audio: config.audio ? {
                input: config.audio.input ? {
                    format: normalizeAudioFormat(config.audio.input.format),
                    noiseReduction: config.audio.input.noiseReduction ?? null,
                    transcription: config.audio.input.transcription,
                    turnDetection: config.audio.input.turnDetection
                } : undefined,
                output: config.audio.output ? {
                    format: normalizeAudioFormat(config.audio.output.format),
                    voice: config.audio.output.voice,
                    speed: config.audio.output.speed
                } : undefined
            } : undefined
        };
    }
    return {
        model: config.model,
        instructions: config.instructions,
        toolChoice: config.toolChoice,
        tools: config.tools,
        tracing: config.tracing,
        providerData: config.providerData,
        prompt: config.prompt,
        outputModalities: config.modalities,
        audio: {
            input: {
                format: normalizeAudioFormat(config.inputAudioFormat),
                noiseReduction: config.inputAudioNoiseReduction ?? null,
                transcription: config.inputAudioTranscription,
                turnDetection: config.turnDetection
            },
            output: {
                format: normalizeAudioFormat(config.outputAudioFormat),
                voice: config.voice,
                speed: config.speed
            }
        }
    };
}
function normalizeAudioFormat(format) {
    if (!format) return undefined;
    if (typeof format === 'object') return format;
    const f = String(format);
    if (f === 'pcm16') return {
        type: 'audio/pcm',
        rate: 24000
    };
    if (f === 'g711_ulaw') return {
        type: 'audio/pcmu'
    };
    if (f === 'g711_alaw') return {
        type: 'audio/pcma'
    };
    // Default fallback: assume 24kHz PCM if unknown string
    return {
        type: 'audio/pcm',
        rate: 24000
    };
} //# sourceMappingURL=clientMessages.mjs.map
}),
"[project]/node_modules/@openai/agents-realtime/dist/items.mjs [app-route] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "baseItemSchema",
    ()=>baseItemSchema,
    "realtimeMcpCallApprovalRequestItem",
    ()=>realtimeMcpCallApprovalRequestItem,
    "realtimeMcpCallItem",
    ()=>realtimeMcpCallItem,
    "realtimeMessageItemSchema",
    ()=>realtimeMessageItemSchema,
    "realtimeToolCallItem",
    ()=>realtimeToolCallItem
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/external.js [app-route] (ecmascript) <export * as z>");
;
const baseItemSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    itemId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const realtimeMessageItemSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].discriminatedUnion('role', [
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
        itemId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
        previousItemId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional(),
        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('message'),
        role: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('system'),
        content: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
            type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('input_text'),
            text: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
        }))
    }),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
        itemId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
        previousItemId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional(),
        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('message'),
        role: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('user'),
        status: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].enum([
            'in_progress',
            'completed'
        ]),
        content: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
            type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('input_text'),
            text: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
        }).or(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
            type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('input_audio'),
            audio: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional(),
            transcript: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable()
        })))
    }),
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
        itemId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
        previousItemId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional(),
        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('message'),
        role: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('assistant'),
        status: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].enum([
            'in_progress',
            'completed',
            'incomplete'
        ]),
        content: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
            type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('output_text'),
            text: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
        }).or(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
            type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('output_audio'),
            audio: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional(),
            transcript: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional()
        })))
    })
]);
const realtimeToolCallItem = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    itemId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    previousItemId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional(),
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('function_call'),
    status: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].enum([
        'in_progress',
        'completed',
        'incomplete'
    ]),
    arguments: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    output: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable()
});
const realtimeMcpCallItem = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    itemId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    previousItemId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional(),
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].enum([
        'mcp_call',
        'mcp_tool_call'
    ]),
    status: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].enum([
        'in_progress',
        'completed',
        'incomplete'
    ]),
    arguments: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    output: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable()
});
const realtimeMcpCallApprovalRequestItem = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    itemId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('mcp_approval_request'),
    serverLabel: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    arguments: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].record(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any()),
    approved: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].boolean().optional().nullable()
}); //# sourceMappingURL=items.mjs.map
}),
"[project]/node_modules/@openai/agents-realtime/dist/openaiRealtimeEvents.mjs [app-route] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "conversationCreatedEventSchema",
    ()=>conversationCreatedEventSchema,
    "conversationItemAddedEventSchema",
    ()=>conversationItemAddedEventSchema,
    "conversationItemContentSchema",
    ()=>conversationItemContentSchema,
    "conversationItemCreateEventSchema",
    ()=>conversationItemCreateEventSchema,
    "conversationItemDeleteEventSchema",
    ()=>conversationItemDeleteEventSchema,
    "conversationItemDeletedEventSchema",
    ()=>conversationItemDeletedEventSchema,
    "conversationItemDoneEventSchema",
    ()=>conversationItemDoneEventSchema,
    "conversationItemInputAudioTranscriptionCompletedEventSchema",
    ()=>conversationItemInputAudioTranscriptionCompletedEventSchema,
    "conversationItemInputAudioTranscriptionDeltaEventSchema",
    ()=>conversationItemInputAudioTranscriptionDeltaEventSchema,
    "conversationItemInputAudioTranscriptionFailedEventSchema",
    ()=>conversationItemInputAudioTranscriptionFailedEventSchema,
    "conversationItemRetrieveEventSchema",
    ()=>conversationItemRetrieveEventSchema,
    "conversationItemRetrievedEventSchema",
    ()=>conversationItemRetrievedEventSchema,
    "conversationItemSchema",
    ()=>conversationItemSchema,
    "conversationItemTruncateEventSchema",
    ()=>conversationItemTruncateEventSchema,
    "conversationItemTruncatedEventSchema",
    ()=>conversationItemTruncatedEventSchema,
    "errorEventSchema",
    ()=>errorEventSchema,
    "genericEventSchema",
    ()=>genericEventSchema,
    "inputAudioBufferAppendEventSchema",
    ()=>inputAudioBufferAppendEventSchema,
    "inputAudioBufferClearEventSchema",
    ()=>inputAudioBufferClearEventSchema,
    "inputAudioBufferClearedEventSchema",
    ()=>inputAudioBufferClearedEventSchema,
    "inputAudioBufferCommitEventSchema",
    ()=>inputAudioBufferCommitEventSchema,
    "inputAudioBufferCommittedEventSchema",
    ()=>inputAudioBufferCommittedEventSchema,
    "inputAudioBufferSpeechStartedEventSchema",
    ()=>inputAudioBufferSpeechStartedEventSchema,
    "inputAudioBufferSpeechStoppedEventSchema",
    ()=>inputAudioBufferSpeechStoppedEventSchema,
    "mcpListToolsCompletedEventSchema",
    ()=>mcpListToolsCompletedEventSchema,
    "mcpListToolsFailedEventSchema",
    ()=>mcpListToolsFailedEventSchema,
    "mcpListToolsInProgressEventSchema",
    ()=>mcpListToolsInProgressEventSchema,
    "outputAudioBufferClearedEventSchema",
    ()=>outputAudioBufferClearedEventSchema,
    "outputAudioBufferStartedEventSchema",
    ()=>outputAudioBufferStartedEventSchema,
    "outputAudioBufferStoppedEventSchema",
    ()=>outputAudioBufferStoppedEventSchema,
    "parseRealtimeEvent",
    ()=>parseRealtimeEvent,
    "rateLimitsUpdatedEventSchema",
    ()=>rateLimitsUpdatedEventSchema,
    "realtimeClientEventSchema",
    ()=>realtimeClientEventSchema,
    "realtimeResponse",
    ()=>realtimeResponse,
    "realtimeServerEventSchema",
    ()=>realtimeServerEventSchema,
    "responseAudioDeltaEventSchema",
    ()=>responseAudioDeltaEventSchema,
    "responseAudioDoneEventSchema",
    ()=>responseAudioDoneEventSchema,
    "responseAudioTranscriptDeltaEventSchema",
    ()=>responseAudioTranscriptDeltaEventSchema,
    "responseAudioTranscriptDoneEventSchema",
    ()=>responseAudioTranscriptDoneEventSchema,
    "responseCancelEventSchema",
    ()=>responseCancelEventSchema,
    "responseContentPartAddedEventSchema",
    ()=>responseContentPartAddedEventSchema,
    "responseContentPartDoneEventSchema",
    ()=>responseContentPartDoneEventSchema,
    "responseCreateEventSchema",
    ()=>responseCreateEventSchema,
    "responseCreatedEventSchema",
    ()=>responseCreatedEventSchema,
    "responseDoneEventSchema",
    ()=>responseDoneEventSchema,
    "responseFunctionCallArgumentsDeltaEventSchema",
    ()=>responseFunctionCallArgumentsDeltaEventSchema,
    "responseFunctionCallArgumentsDoneEventSchema",
    ()=>responseFunctionCallArgumentsDoneEventSchema,
    "responseMcpCallArgumentsDeltaEventSchema",
    ()=>responseMcpCallArgumentsDeltaEventSchema,
    "responseMcpCallArgumentsDoneEventSchema",
    ()=>responseMcpCallArgumentsDoneEventSchema,
    "responseMcpCallCompletedEventSchema",
    ()=>responseMcpCallCompletedEventSchema,
    "responseMcpCallInProgressEventSchema",
    ()=>responseMcpCallInProgressEventSchema,
    "responseOutputItemAddedEventSchema",
    ()=>responseOutputItemAddedEventSchema,
    "responseOutputItemDoneEventSchema",
    ()=>responseOutputItemDoneEventSchema,
    "responseTextDeltaEventSchema",
    ()=>responseTextDeltaEventSchema,
    "responseTextDoneEventSchema",
    ()=>responseTextDoneEventSchema,
    "sessionCreatedEventSchema",
    ()=>sessionCreatedEventSchema,
    "sessionUpdateEventSchema",
    ()=>sessionUpdateEventSchema,
    "sessionUpdatedEventSchema",
    ()=>sessionUpdatedEventSchema
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__ = __turbopack_context__.i("[project]/node_modules/zod/v3/external.js [app-route] (ecmascript) <export * as z>");
;
const realtimeResponse = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional().nullable(),
    conversation_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional().nullable(),
    max_output_tokens: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number().or(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('inf')).optional().nullable(),
    metadata: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].record(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any()).optional().nullable(),
    // GA rename: modalities -> output_modalities
    output_modalities: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()).optional().nullable(),
    object: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('realtime.response').optional().nullable(),
    output: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any()).optional().nullable(),
    // GA grouping: audio.output.{format,voice}
    audio: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
        output: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
            format: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any().optional().nullable(),
            voice: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional().nullable()
        }).optional().nullable()
    }).optional().nullable(),
    status: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].enum([
        'completed',
        'incomplete',
        'failed',
        'cancelled',
        'in_progress'
    ]).optional().nullable(),
    status_details: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].record(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any()).optional().nullable(),
    usage: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
        input_tokens: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number().optional(),
        input_tokens_details: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].record(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any()).optional().nullable(),
        output_tokens: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number().optional(),
        output_tokens_details: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].record(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any()).optional().nullable()
    }).optional().nullable()
});
const conversationItemContentSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
    audio: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional(),
    text: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional(),
    transcript: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional(),
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].union([
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('input_text'),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('input_audio'),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('item_reference'),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('output_text'),
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('output_audio')
    ])
});
const conversationItemSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
    arguments: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
    call_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
    content: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].array(conversationItemContentSchema).optional(),
    name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
    output: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional(),
    role: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].enum([
        'user',
        'assistant',
        'system'
    ]).optional(),
    status: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].enum([
        'completed',
        'incomplete',
        'in_progress'
    ]).optional(),
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].enum([
        'message',
        'function_call',
        'function_call_output',
        'mcp_list_tools',
        'mcp_tool_call',
        'mcp_call',
        'mcp_approval_request',
        'mcp_approval_response'
    ]).optional(),
    approval_request_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional(),
    approve: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].boolean().nullable().optional(),
    reason: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional(),
    server_label: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
    error: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any().nullable().optional(),
    tools: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
        name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
        description: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
        input_schema: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].record(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any()).optional()
    }).passthrough()).optional()
}).passthrough();
const conversationCreatedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('conversation.created'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    conversation: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
        id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
        object: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('realtime.conversation').optional()
    })
});
const conversationItemAddedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('conversation.item.added'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item: conversationItemSchema,
    previous_item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional()
});
const conversationItemDoneEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('conversation.item.done'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item: conversationItemSchema,
    previous_item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional()
});
const conversationItemDeletedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('conversation.item.deleted'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const conversationItemInputAudioTranscriptionCompletedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('conversation.item.input_audio_transcription.completed'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    content_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    transcript: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    logprobs: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any()).nullable().optional()
});
const conversationItemInputAudioTranscriptionDeltaEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('conversation.item.input_audio_transcription.delta'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    content_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number().optional(),
    delta: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
    logprobs: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any()).nullable().optional()
});
const conversationItemInputAudioTranscriptionFailedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('conversation.item.input_audio_transcription.failed'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    content_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    error: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
        code: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
        message: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
        param: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional()
    })
});
const conversationItemRetrievedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('conversation.item.retrieved'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item: conversationItemSchema
});
const conversationItemTruncatedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('conversation.item.truncated'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    audio_end_ms: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    content_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number()
});
const conversationItemCreateEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('conversation.item.create'),
    item: conversationItemSchema,
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
    previous_item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional()
});
const conversationItemDeleteEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('conversation.item.delete'),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional()
});
const conversationItemRetrieveEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('conversation.item.retrieve'),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional()
});
const conversationItemTruncateEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('conversation.item.truncate'),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    audio_end_ms: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    content_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional()
});
const errorEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('error'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
    error: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any().optional()
});
const inputAudioBufferClearedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('input_audio_buffer.cleared'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const inputAudioBufferAppendEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('input_audio_buffer.append'),
    audio: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional()
});
const inputAudioBufferClearEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('input_audio_buffer.clear'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional()
});
const inputAudioBufferCommitEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('input_audio_buffer.commit'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional()
});
const inputAudioBufferCommittedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('input_audio_buffer.committed'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    previous_item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().nullable().optional()
});
const inputAudioBufferSpeechStartedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('input_audio_buffer.speech_started'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    audio_start_ms: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number()
});
const inputAudioBufferSpeechStoppedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('input_audio_buffer.speech_stopped'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    audio_end_ms: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number()
});
const outputAudioBufferStartedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('output_audio_buffer.started'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
}).passthrough();
const outputAudioBufferStoppedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('output_audio_buffer.stopped'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
}).passthrough();
const outputAudioBufferClearedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('output_audio_buffer.cleared'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const rateLimitsUpdatedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('rate_limits.updated'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    rate_limits: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].array(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
        limit: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number().optional(),
        name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].enum([
            'requests',
            'tokens'
        ]).optional(),
        remaining: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number().optional(),
        reset_seconds: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number().optional()
    }))
});
const responseAudioDeltaEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.output_audio.delta'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    content_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    delta: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    response_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const responseAudioDoneEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.output_audio.done'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    content_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    response_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const responseAudioTranscriptDeltaEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.output_audio_transcript.delta'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    content_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    delta: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    response_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const responseAudioTranscriptDoneEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    //  GA may introduce response.output_audio_transcript.done
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.output_audio_transcript.done'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    content_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    transcript: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    response_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const responseContentPartAddedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.content_part.added'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    content_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    response_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    part: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
        audio: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
        text: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
        transcript: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].enum([
            'text',
            'audio'
        ]).optional()
    })
});
const responseContentPartDoneEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.content_part.done'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    content_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    response_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    part: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
        audio: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
        text: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
        transcript: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
        type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].enum([
            'text',
            'audio'
        ]).optional()
    })
});
const responseCreatedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.created'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    response: realtimeResponse
});
const responseDoneEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.done'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    response: realtimeResponse
});
const responseFunctionCallArgumentsDeltaEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.function_call_arguments.delta'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    call_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    delta: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    response_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const responseFunctionCallArgumentsDoneEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.function_call_arguments.done'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    call_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    arguments: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    response_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const responseOutputItemAddedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.output_item.added'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item: conversationItemSchema,
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    response_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const responseOutputItemDoneEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.output_item.done'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item: conversationItemSchema,
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    response_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const responseTextDeltaEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.output_text.delta'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    content_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    delta: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    response_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const responseTextDoneEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    // No rename specified for done; keep response.text.done
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.output_text.done'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    content_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    text: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    response_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const sessionCreatedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('session.created'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    session: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any()
});
const sessionUpdatedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('session.updated'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    session: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any()
});
const responseCancelEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.cancel'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
    response_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional()
});
const responseCreateEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.create'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
    response: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any().optional()
});
const sessionUpdateEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('session.update'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
    session: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].any()
});
const mcpListToolsInProgressEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('mcp_list_tools.in_progress'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional()
});
const mcpListToolsCompletedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('mcp_list_tools.completed'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional()
});
const responseMcpCallArgumentsDeltaEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.mcp_call_arguments.delta'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    response_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    delta: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    obfuscation: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const responseMcpCallArgumentsDoneEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.mcp_call_arguments.done'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    response_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    arguments: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const responseMcpCallInProgressEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.mcp_call.in_progress'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const responseMcpCallCompletedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('response.mcp_call.completed'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    output_index: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].number(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string()
});
const mcpListToolsFailedEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].literal('mcp_list_tools.failed'),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional(),
    item_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional()
});
const genericEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].object({
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string(),
    event_id: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].string().optional().nullable()
}).passthrough();
const realtimeServerEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].discriminatedUnion('type', [
    conversationCreatedEventSchema,
    conversationItemAddedEventSchema,
    conversationItemDoneEventSchema,
    conversationItemDeletedEventSchema,
    conversationItemInputAudioTranscriptionCompletedEventSchema,
    conversationItemInputAudioTranscriptionDeltaEventSchema,
    conversationItemInputAudioTranscriptionFailedEventSchema,
    conversationItemRetrievedEventSchema,
    conversationItemTruncatedEventSchema,
    errorEventSchema,
    inputAudioBufferClearedEventSchema,
    inputAudioBufferCommittedEventSchema,
    inputAudioBufferSpeechStartedEventSchema,
    inputAudioBufferSpeechStoppedEventSchema,
    outputAudioBufferStartedEventSchema,
    outputAudioBufferStoppedEventSchema,
    outputAudioBufferClearedEventSchema,
    rateLimitsUpdatedEventSchema,
    responseAudioDeltaEventSchema,
    responseAudioDoneEventSchema,
    responseAudioTranscriptDeltaEventSchema,
    responseAudioTranscriptDoneEventSchema,
    responseContentPartAddedEventSchema,
    responseContentPartDoneEventSchema,
    responseCreatedEventSchema,
    responseDoneEventSchema,
    responseFunctionCallArgumentsDeltaEventSchema,
    responseFunctionCallArgumentsDoneEventSchema,
    responseOutputItemAddedEventSchema,
    responseOutputItemDoneEventSchema,
    responseTextDeltaEventSchema,
    responseTextDoneEventSchema,
    sessionCreatedEventSchema,
    sessionUpdatedEventSchema,
    mcpListToolsInProgressEventSchema,
    mcpListToolsCompletedEventSchema,
    mcpListToolsFailedEventSchema,
    responseMcpCallArgumentsDeltaEventSchema,
    responseMcpCallArgumentsDoneEventSchema,
    responseMcpCallInProgressEventSchema,
    responseMcpCallCompletedEventSchema
]);
const realtimeClientEventSchema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$zod$2f$v3$2f$external$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__z$3e$__["z"].discriminatedUnion('type', [
    conversationItemCreateEventSchema,
    conversationItemDeleteEventSchema,
    conversationItemRetrieveEventSchema,
    conversationItemTruncateEventSchema,
    inputAudioBufferAppendEventSchema,
    inputAudioBufferClearEventSchema,
    inputAudioBufferCommitEventSchema,
    responseCancelEventSchema,
    responseCreateEventSchema,
    sessionUpdateEventSchema
]);
function parseRealtimeEvent(event) {
    const raw = JSON.parse(event.data.toString());
    const parsed = realtimeServerEventSchema.safeParse(raw);
    if (!parsed.success) {
        const genericParsed = genericEventSchema.safeParse(raw);
        if (genericParsed.success) {
            return {
                data: genericParsed.data,
                isGeneric: true
            };
        }
        return {
            data: null,
            isGeneric: true
        };
    }
    return {
        data: parsed.data,
        isGeneric: false
    };
} //# sourceMappingURL=openaiRealtimeEvents.mjs.map
}),
"[project]/node_modules/@openai/agents-realtime/dist/openaiRealtimeBase.mjs [app-route] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "DEFAULT_OPENAI_REALTIME_MODEL",
    ()=>DEFAULT_OPENAI_REALTIME_MODEL,
    "DEFAULT_OPENAI_REALTIME_SESSION_CONFIG",
    ()=>DEFAULT_OPENAI_REALTIME_SESSION_CONFIG,
    "OpenAIRealtimeBase",
    ()=>OpenAIRealtimeBase
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/index.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$events__$5b$external$5d$__$28$node$3a$events$2c$__cjs$29$__$3c$export__EventEmitter__as__RuntimeEventEmitter$3e$__ = __turbopack_context__.i("[externals]/node:events [external] (node:events, cjs) <export EventEmitter as RuntimeEventEmitter>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$usage$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/usage.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$clientMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/clientMessages.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$items$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/items.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/logger.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeEvents$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/openaiRealtimeEvents.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/utils.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$utils$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/utils/index.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$lifecycle$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/lifecycle.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
const DEFAULT_OPENAI_REALTIME_MODEL = 'gpt-realtime';
const DEFAULT_OPENAI_REALTIME_SESSION_CONFIG = {
    outputModalities: [
        'audio'
    ],
    audio: {
        input: {
            format: {
                type: 'audio/pcm',
                rate: 24000
            },
            transcription: {
                model: 'gpt-4o-mini-transcribe'
            },
            turnDetection: {
                type: 'semantic_vad'
            },
            noiseReduction: null
        },
        output: {
            format: {
                type: 'audio/pcm',
                rate: 24000
            },
            speed: 1
        }
    }
};
class OpenAIRealtimeBase extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$lifecycle$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["EventEmitterDelegate"] {
    #model;
    #apiKey;
    #tracingConfig = null;
    #rawSessionConfig = null;
    eventEmitter = new __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$events__$5b$external$5d$__$28$node$3a$events$2c$__cjs$29$__$3c$export__EventEmitter__as__RuntimeEventEmitter$3e$__["RuntimeEventEmitter"]();
    constructor(options = {}){
        super();
        this.#model = options.model ?? DEFAULT_OPENAI_REALTIME_MODEL;
        this.#apiKey = options.apiKey;
    }
    /**
     * The current model that is being used by the transport layer.
     */ get currentModel() {
        return this.#model;
    }
    /**
     * The current model that is being used by the transport layer.
     * **Note**: The model cannot be changed mid conversation.
     */ set currentModel(model) {
        this.#model = model;
    }
    get _rawSessionConfig() {
        return this.#rawSessionConfig ?? null;
    }
    async _getApiKey(options) {
        const apiKey = options.apiKey ?? this.#apiKey;
        if (typeof apiKey === 'function') {
            return await apiKey();
        }
        return apiKey;
    }
    _onMessage(event) {
        const { data: parsed, isGeneric } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeEvents$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["parseRealtimeEvent"])(event);
        if (parsed === null) {
            return;
        }
        this.emit('*', parsed);
        if (isGeneric) {
            return;
        }
        if (parsed.type === 'error') {
            this.emit('error', {
                type: 'error',
                error: parsed
            });
        } else {
            this.emit(parsed.type, parsed);
        }
        if (parsed.type === 'response.created') {
            this.emit('turn_started', {
                type: 'response_started',
                providerData: {
                    ...parsed
                }
            });
            return;
        }
        if (parsed.type === 'session.updated') {
            this.#rawSessionConfig = parsed.session;
        }
        if (parsed.type === 'response.done') {
            const response = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeEvents$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["responseDoneEventSchema"].safeParse(parsed);
            if (!response.success) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].error('Error parsing response done event', response.error);
                return;
            }
            const inputTokens = response.data.response.usage?.input_tokens ?? 0;
            const outputTokens = response.data.response.usage?.output_tokens ?? 0;
            const totalTokens = inputTokens + outputTokens;
            const usage = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$usage$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Usage"]({
                inputTokens,
                inputTokensDetails: response.data.response.usage?.input_tokens_details ?? {},
                outputTokens,
                outputTokensDetails: response.data.response.usage?.output_tokens_details ?? {},
                totalTokens
            });
            this.emit('usage_update', usage);
            this.emit('turn_done', {
                type: 'response_done',
                response: {
                    id: response.data.response.id ?? '',
                    output: response.data.response.output ?? [],
                    usage: {
                        inputTokens,
                        inputTokensDetails: response.data.response.usage?.input_tokens_details ?? {},
                        outputTokens,
                        outputTokensDetails: response.data.response.usage?.output_tokens_details ?? {},
                        totalTokens
                    }
                }
            });
            return;
        }
        if (parsed.type === 'response.output_audio.done') {
            this.emit('audio_done');
            return;
        }
        if (parsed.type === 'conversation.item.deleted') {
            this.emit('item_deleted', {
                itemId: parsed.item_id
            });
            return;
        }
        if (parsed.type === 'conversation.item.input_audio_transcription.completed' || parsed.type === 'conversation.item.truncated') {
            // right now rather than keeping track of partials and rebuilding the item we
            // will retrieve it instead which triggers the `conversation.item.retrieved` event below
            this.sendEvent({
                type: 'conversation.item.retrieve',
                item_id: parsed.item_id
            });
            return;
        }
        if (parsed.type === 'conversation.item.input_audio_transcription.delta' || parsed.type === 'response.output_text.delta' || parsed.type === 'response.output_audio_transcript.delta' || parsed.type === 'response.function_call_arguments.delta') {
            if (parsed.type === 'response.output_audio_transcript.delta') {
                this.emit('audio_transcript_delta', {
                    type: 'transcript_delta',
                    delta: parsed.delta,
                    itemId: parsed.item_id,
                    responseId: parsed.response_id
                });
            }
            // no support for partial transcripts yet.
            return;
        }
        if (parsed.type === 'conversation.item.added' || parsed.type === 'conversation.item.done' || parsed.type === 'conversation.item.retrieved') {
            // Handle MCP list tools items (only act when done to ensure tools are present)
            if (parsed.item.type === 'mcp_list_tools' && parsed.type === 'conversation.item.done') {
                const serverLabel = parsed.item.server_label ?? '';
                const tools = parsed.item.tools ?? [];
                try {
                    this.emit('mcp_tools_listed', {
                        serverLabel,
                        tools
                    });
                } catch (err) {
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].error('Error emitting mcp_tools_listed', err, parsed.item);
                }
                // We do not add this item to history; it's a transport-level side-channel.
                return;
            }
            if (parsed.item.type === 'message') {
                const previousItemId = parsed.type === 'conversation.item.added' || parsed.type === 'conversation.item.done' ? parsed.previous_item_id : null;
                const item = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$items$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["realtimeMessageItemSchema"].parse({
                    itemId: parsed.item.id,
                    previousItemId,
                    type: parsed.item.type,
                    role: parsed.item.role,
                    content: parsed.item.content,
                    status: parsed.item.status
                });
                this.emit('item_update', item);
                return;
            }
            if (parsed.item.type === 'mcp_approval_request' && parsed.type === 'conversation.item.done') {
                const item = parsed.item;
                const mcpApprovalRequest = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$items$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["realtimeMcpCallApprovalRequestItem"].parse({
                    itemId: item.id,
                    type: item.type,
                    serverLabel: item.server_label,
                    name: item.name,
                    arguments: JSON.parse(item.arguments || '{}'),
                    approved: item.approved
                });
                this.emit('item_update', mcpApprovalRequest);
                this.emit('mcp_approval_request', mcpApprovalRequest);
                return;
            }
            if (parsed.item.type === 'mcp_tool_call' || parsed.item.type === 'mcp_call') {
                const status = parsed.type === 'conversation.item.done' ? 'completed' : 'in_progress';
                const mcpCall = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$items$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["realtimeMcpCallItem"].parse({
                    itemId: parsed.item.id,
                    type: parsed.item.type,
                    status,
                    arguments: parsed.item.arguments,
                    name: parsed.item.name,
                    output: parsed.item.output
                });
                this.emit('item_update', mcpCall);
                if (parsed.type === 'conversation.item.done') {
                    this.emit('mcp_tool_call_completed', mcpCall);
                }
                return;
            }
        }
        if (parsed.type === 'response.mcp_call.in_progress') {
            const item = parsed;
            this.sendEvent({
                type: 'conversation.item.retrieve',
                item_id: item.item_id
            });
            return;
        }
        if (parsed.type === 'mcp_list_tools.in_progress') {
            const item = parsed;
            if (item.item_id) {
                this.sendEvent({
                    type: 'conversation.item.retrieve',
                    item_id: item.item_id
                });
            }
            return;
        }
        if (parsed.type === 'response.output_item.done' || parsed.type === 'response.output_item.added') {
            const item = parsed.item;
            if (item.type === 'function_call' && item.status === 'completed') {
                const toolCall = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$items$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["realtimeToolCallItem"].parse({
                    itemId: item.id,
                    type: item.type,
                    status: 'in_progress',
                    arguments: item.arguments,
                    name: item.name,
                    output: null
                });
                this.emit('item_update', toolCall);
                this.emit('function_call', {
                    id: item.id,
                    type: 'function_call',
                    callId: item.call_id ?? '',
                    arguments: item.arguments ?? '',
                    name: item.name ?? ''
                });
                return;
            }
            if (item.type === 'mcp_tool_call' || item.type === 'mcp_call') {
                const mcpCall = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$items$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["realtimeMcpCallItem"].parse({
                    itemId: item.id,
                    type: item.type,
                    status: parsed.type === 'response.output_item.done' ? 'completed' : 'in_progress',
                    arguments: item.arguments,
                    name: item.name,
                    output: item.output
                });
                this.emit('item_update', mcpCall);
                return;
            }
            if (item.type === 'message') {
                const realtimeItem = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$items$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["realtimeMessageItemSchema"].parse({
                    itemId: parsed.item.id,
                    type: parsed.item.type,
                    role: parsed.item.role,
                    content: parsed.item.content,
                    status: parsed.type === 'response.output_item.done' ? item.status ?? 'completed' : item.status ?? 'in_progress'
                });
                this.emit('item_update', realtimeItem);
                return;
            }
        }
    }
    _onError(error) {
        this.emit('error', {
            type: 'error',
            error
        });
    }
    _onOpen() {
        this.emit('connected');
    }
    _onClose() {
        this.emit('disconnected');
    }
    /**
     * Send a message to the Realtime API. This will create a new item in the conversation and
     * trigger a response.
     *
     * @param message - The message to send.
     * @param otherEventData - Additional event data to send.
     */ sendMessage(message, otherEventData, { triggerResponse = true } = {}) {
        const content = typeof message === 'string' ? [
            {
                type: 'input_text',
                text: message
            }
        ] : message.content.map((content)=>{
            if (content.type === 'input_image') {
                return {
                    type: 'input_image',
                    image_url: content.image,
                    ...content.providerData ?? {}
                };
            }
            return content;
        });
        this.sendEvent({
            type: 'conversation.item.create',
            item: {
                type: 'message',
                role: 'user',
                content
            },
            ...otherEventData
        });
        if (triggerResponse) {
            this.sendEvent({
                type: 'response.create'
            });
        }
    }
    addImage(image, { triggerResponse = true } = {}) {
        this.sendMessage({
            type: 'message',
            role: 'user',
            content: [
                {
                    type: 'input_image',
                    image
                }
            ]
        }, {}, {
            triggerResponse
        });
    }
    _getMergedSessionConfig(config) {
        const newConfig = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$clientMessages$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toNewSessionConfig"])(config);
        const sessionData = {
            type: 'realtime',
            instructions: newConfig.instructions,
            model: newConfig.model ?? this.#model,
            output_modalities: newConfig.outputModalities ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.outputModalities,
            audio: {
                input: {
                    format: newConfig.audio?.input?.format ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio?.input?.format,
                    noise_reduction: newConfig.audio?.input?.noiseReduction ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio?.input?.noiseReduction,
                    transcription: newConfig.audio?.input?.transcription ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio?.input?.transcription,
                    turn_detection: OpenAIRealtimeBase.buildTurnDetectionConfig(newConfig.audio?.input?.turnDetection) ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio?.input?.turnDetection
                },
                output: {
                    format: newConfig.audio?.output?.format ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio?.output?.format,
                    voice: newConfig.audio?.output?.voice ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio?.output?.voice,
                    speed: newConfig.audio?.output?.speed ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio?.output?.speed
                }
            },
            tool_choice: newConfig.toolChoice ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.toolChoice,
            // We don't set tracing here to make sure that we don't try to override it on every
            // session.update as it might lead to errors
            ...newConfig.providerData ?? {}
        };
        if (newConfig.prompt) {
            sessionData.prompt = {
                id: newConfig.prompt.promptId,
                version: newConfig.prompt.version,
                variables: newConfig.prompt.variables
            };
        }
        if (newConfig.tools && newConfig.tools.length > 0) {
            sessionData.tools = newConfig.tools.map((tool)=>({
                    ...tool,
                    strict: undefined
                }));
        }
        return sessionData;
    }
    static buildTurnDetectionConfig(c) {
        if (typeof c === 'undefined') {
            return undefined;
        }
        const { type, createResponse, create_response, eagerness, interruptResponse, interrupt_response, prefixPaddingMs, prefix_padding_ms, silenceDurationMs, silence_duration_ms, threshold, idleTimeoutMs, idle_timeout_ms, ...rest } = c;
        const config = {
            type,
            create_response: createResponse ? createResponse : create_response,
            eagerness,
            interrupt_response: interruptResponse ? interruptResponse : interrupt_response,
            prefix_padding_ms: prefixPaddingMs ? prefixPaddingMs : prefix_padding_ms,
            silence_duration_ms: silenceDurationMs ? silenceDurationMs : silence_duration_ms,
            idle_timeout_ms: idleTimeoutMs ? idleTimeoutMs : idle_timeout_ms,
            threshold,
            ...rest
        };
        // Remove undefined values from the config
        Object.keys(config).forEach((key)=>{
            if (config[key] === undefined) delete config[key];
        });
        return Object.keys(config).length > 0 ? config : undefined;
    }
    /**
     * Sets the internal tracing config. This is used to track the tracing config that has been set
     * during the session.create event.
     */ set _tracingConfig(tracingConfig) {
        this.#tracingConfig = tracingConfig;
    }
    /**
     * Sets the tracing config for the session. This will send the tracing config to the Realtime API.
     *
     * @param tracingConfig - The tracing config to set. We don't support 'auto' here as the SDK will always configure a Workflow Name unless it exists
     */ _updateTracingConfig(tracingConfig) {
        if (typeof this.#tracingConfig === 'undefined') {
            // treating it as default value
            this.#tracingConfig = null;
        }
        if (tracingConfig === 'auto') {
            // turn on tracing in auto mode
            this.sendEvent({
                type: 'session.update',
                session: {
                    type: 'realtime',
                    tracing: 'auto'
                }
            });
            return;
        }
        if (this.#tracingConfig !== null && typeof this.#tracingConfig !== 'string' && typeof tracingConfig !== 'string') {
            // tracing is already set, we can't change it
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].warn('Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.');
            return;
        }
        if (tracingConfig === null) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].debug('Disabling tracing for this session. It cannot be turned on for this session from this point on.');
            this.sendEvent({
                type: 'session.update',
                session: {
                    type: 'realtime',
                    tracing: null
                }
            });
            return;
        }
        if (this.#tracingConfig === null || typeof this.#tracingConfig === 'string') {
            // tracing is currently not set so we can set it to the new value
            this.sendEvent({
                type: 'session.update',
                session: {
                    type: 'realtime',
                    tracing: tracingConfig
                }
            });
            return;
        }
        if (tracingConfig?.group_id !== this.#tracingConfig?.group_id || tracingConfig?.metadata !== this.#tracingConfig?.metadata || tracingConfig?.workflow_name !== this.#tracingConfig?.workflow_name) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].warn('Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s', JSON.stringify(this.#tracingConfig), JSON.stringify(tracingConfig));
            return;
        }
        this.sendEvent({
            type: 'session.update',
            session: {
                type: 'realtime',
                tracing: tracingConfig
            }
        });
    }
    /**
     * Updates the session config. This will merge it with the current session config with the default
     * values and send it to the Realtime API.
     *
     * @param config - The session config to update.
     */ updateSessionConfig(config) {
        const sessionData = this._getMergedSessionConfig(config);
        this.sendEvent({
            type: 'session.update',
            session: sessionData
        });
    }
    /**
     * Send the output of a function call to the Realtime API.
     *
     * @param toolCall - The tool call to send the output for.
     * @param output - The output of the function call.
     * @param startResponse - Whether to start a new response after sending the output.
     */ sendFunctionCallOutput(toolCall, output, startResponse = true) {
        this.sendEvent({
            type: 'conversation.item.create',
            item: {
                type: 'function_call_output',
                output,
                call_id: toolCall.callId
            }
        });
        try {
            const item = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$items$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["realtimeToolCallItem"].parse({
                itemId: toolCall.id,
                previousItemId: toolCall.previousItemId,
                type: 'function_call',
                status: 'completed',
                arguments: toolCall.arguments,
                name: toolCall.name,
                output
            });
            this.emit('item_update', item);
        } catch (error) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].error('Error parsing tool call item', error, toolCall);
        }
        if (startResponse) {
            this.sendEvent({
                type: 'response.create'
            });
        }
    }
    /**
     * Send an audio buffer to the Realtime API. If `{ commit: true }` is passed, the audio buffer
     * will be committed and the model will start processing it. This is necessary if you have
     * disabled turn detection / voice activity detection (VAD).
     *
     * @param audio - The audio buffer to send.
     * @param options - The options for the audio buffer.
     */ sendAudio(audio, { commit = false } = {}) {
        this.sendEvent({
            type: 'input_audio_buffer.append',
            audio: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["arrayBufferToBase64"])(audio)
        });
        if (commit) {
            this.sendEvent({
                type: 'input_audio_buffer.commit'
            });
        }
    }
    /**
     * Reset the history of the conversation. This will create a diff between the old and new history
     * and send the necessary events to the Realtime API to update the history.
     *
     * @param oldHistory - The old history of the conversation.
     * @param newHistory - The new history of the conversation.
     */ resetHistory(oldHistory, newHistory) {
        const { removals, additions, updates } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["diffRealtimeHistory"])(oldHistory, newHistory);
        const removalIds = new Set(removals.map((item)=>item.itemId));
        // we don't have an update event for items so we will remove and re-add what's there
        for (const update of updates){
            removalIds.add(update.itemId);
        }
        if (removalIds.size > 0) {
            for (const itemId of removalIds){
                this.sendEvent({
                    type: 'conversation.item.delete',
                    item_id: itemId
                });
            }
        }
        const additionsAndUpdates = [
            ...additions,
            ...updates
        ];
        for (const addition of additionsAndUpdates){
            if (addition.type === 'message') {
                const itemEntry = {
                    type: 'message',
                    role: addition.role,
                    content: addition.content,
                    id: addition.itemId
                };
                if (addition.role !== 'system' && addition.status) {
                    itemEntry.status = addition.status;
                }
                this.sendEvent({
                    type: 'conversation.item.create',
                    item: itemEntry
                });
            } else if (addition.type === 'function_call') {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].warn('Function calls cannot be manually added or updated at the moment. Ignoring.');
            }
        }
    }
    sendMcpResponse(approvalRequest, approved) {
        this.sendEvent({
            type: 'conversation.item.create',
            previous_item_id: approvalRequest.itemId,
            item: {
                type: 'mcp_approval_response',
                approval_request_id: approvalRequest.itemId,
                approve: approved
            }
        });
    }
} //# sourceMappingURL=openaiRealtimeBase.mjs.map
}),
"[project]/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebRtc.mjs [app-route] (ecmascript)", ((__turbopack_context__) => {
"use strict";

/// <reference lib="dom" />
__turbopack_context__.s([
    "OpenAIRealtimeWebRTC",
    ()=>OpenAIRealtimeWebRTC
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$shims$2f$shims$2d$node$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/shims/shims-node.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/index.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$errors$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/errors.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/logger.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeBase$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/openaiRealtimeBase.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeEvents$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/openaiRealtimeEvents.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/utils.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
class OpenAIRealtimeWebRTC extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeBase$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OpenAIRealtimeBase"] {
    options;
    #url;
    #state = {
        status: 'disconnected',
        peerConnection: undefined,
        dataChannel: undefined
    };
    #useInsecureApiKey;
    #ongoingResponse = false;
    #muted = false;
    constructor(options = {}){
        if (typeof RTCPeerConnection === 'undefined') {
            throw new Error('WebRTC is not supported in this environment');
        }
        super(options);
        this.options = options;
        this.#url = options.baseUrl ?? `https://api.openai.com/v1/realtime/calls`;
        this.#useInsecureApiKey = options.useInsecureApiKey ?? false;
    }
    /**
     * The current status of the WebRTC connection.
     */ get status() {
        return this.#state.status;
    }
    /**
     * The current connection state of the WebRTC connection including the peer connection and data
     * channel.
     */ get connectionState() {
        return this.#state;
    }
    /**
     * Whether the session is muted.
     */ get muted() {
        return this.#muted;
    }
    /**
     * Connect to the Realtime API. This will establish the connection to the OpenAI Realtime API
     * via WebRTC.
     *
     * If you are using a browser, the transport layer will also automatically configure the
     * microphone and audio output to be used by the session.
     *
     * @param options - The options for the connection.
     */ async connect(options) {
        if (this.#state.status === 'connected') {
            return;
        }
        if (this.#state.status === 'connecting') {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].warn('Realtime connection already in progress. Please await original promise');
        }
        const model = options.model ?? this.currentModel;
        this.currentModel = model;
        const baseUrl = options.url ?? this.#url;
        const apiKey = await this._getApiKey(options);
        const isClientKey = typeof apiKey === 'string' && apiKey.startsWith('ek_');
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$shims$2f$shims$2d$node$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isBrowserEnvironment"])() && !this.#useInsecureApiKey && !isClientKey) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$errors$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UserError"]('Using the WebRTC connection in a browser environment requires an ephemeral client key. If you need to use a regular API key, use the WebSocket transport or set the `useInsecureApiKey` option to true.');
        }
        // eslint-disable-next-line no-async-promise-executor
        return new Promise(async (resolve, reject)=>{
            try {
                const userSessionConfig = {
                    ...options.initialSessionConfig || {},
                    model: this.currentModel
                };
                const connectionUrl = new URL(baseUrl);
                let peerConnection = new RTCPeerConnection();
                const dataChannel = peerConnection.createDataChannel('oai-events');
                this.#state = {
                    status: 'connecting',
                    peerConnection,
                    dataChannel
                };
                this.emit('connection_change', this.#state.status);
                dataChannel.addEventListener('open', ()=>{
                    this.#state = {
                        status: 'connected',
                        peerConnection,
                        dataChannel
                    };
                    // Sending the session config again here once the channel is connected to ensure
                    // that the session config is sent to the server before the first response is received
                    // Setting it on connection should work but the config is not being validated on the
                    // server. This triggers a validation error if the config is not valid.
                    this.updateSessionConfig(userSessionConfig);
                    this.emit('connection_change', this.#state.status);
                    this._onOpen();
                    resolve();
                });
                dataChannel.addEventListener('error', (event)=>{
                    this.close();
                    this._onError(event);
                    reject(event);
                });
                dataChannel.addEventListener('message', (event)=>{
                    this._onMessage(event);
                    const { data: parsed, isGeneric } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeEvents$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["parseRealtimeEvent"])(event);
                    if (!parsed || isGeneric) {
                        return;
                    }
                    if (parsed.type === 'response.created') {
                        this.#ongoingResponse = true;
                    } else if (parsed.type === 'response.done') {
                        this.#ongoingResponse = false;
                    }
                    if (parsed.type === 'session.created') {
                        this._tracingConfig = parsed.session.tracing;
                        // Trying to turn on tracing after the session is created
                        this._updateTracingConfig(userSessionConfig.tracing ?? 'auto');
                    }
                });
                // set up audio playback
                const audioElement = this.options.audioElement ?? document.createElement('audio');
                audioElement.autoplay = true;
                peerConnection.ontrack = (event)=>{
                    audioElement.srcObject = event.streams[0];
                };
                // get microphone stream
                const stream = this.options.mediaStream ?? await navigator.mediaDevices.getUserMedia({
                    audio: true
                });
                peerConnection.addTrack(stream.getAudioTracks()[0]);
                if (this.options.changePeerConnection) {
                    peerConnection = await this.options.changePeerConnection(peerConnection);
                    this.#state = {
                        ...this.#state,
                        peerConnection
                    };
                }
                const offer = await peerConnection.createOffer();
                await peerConnection.setLocalDescription(offer);
                if (!offer.sdp) {
                    throw new Error('Failed to create offer');
                }
                const sdpResponse = await fetch(connectionUrl, {
                    method: 'POST',
                    body: offer.sdp,
                    headers: {
                        'Content-Type': 'application/sdp',
                        Authorization: `Bearer ${apiKey}`,
                        'X-OpenAI-Agents-SDK': __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["HEADERS"]['X-OpenAI-Agents-SDK']
                    }
                });
                const answer = {
                    type: 'answer',
                    sdp: await sdpResponse.text()
                };
                await peerConnection.setRemoteDescription(answer);
            } catch (error) {
                this.close();
                this._onError(error);
                reject(error);
            }
        });
    }
    /**
     * Send an event to the Realtime API. This will stringify the event and send it directly to the
     * API. This can be used if you want to take control over the connection and send events manually.
     *
     * @param event - The event to send.
     */ sendEvent(event) {
        if (!this.#state.dataChannel || this.#state.dataChannel.readyState !== 'open') {
            throw new Error('WebRTC data channel is not connected. Make sure you call `connect()` before sending events.');
        }
        this.#state.dataChannel.send(JSON.stringify(event));
    }
    /**
     * Mute or unmute the session.
     * @param muted - Whether to mute the session.
     */ mute(muted) {
        this.#muted = muted;
        if (this.#state.peerConnection) {
            const peerConnection = this.#state.peerConnection;
            peerConnection.getSenders().forEach((sender)=>{
                if (sender.track) {
                    sender.track.enabled = !muted;
                }
            });
        }
    }
    /**
     * Close the connection to the Realtime API and disconnects the underlying WebRTC connection.
     */ close() {
        if (this.#state.dataChannel) {
            this.#state.dataChannel.close();
        }
        if (this.#state.peerConnection) {
            const peerConnection = this.#state.peerConnection;
            peerConnection.getSenders().forEach((sender)=>{
                sender.track?.stop();
            });
            peerConnection.close();
        }
        if (this.#state.status !== 'disconnected') {
            this.#state = {
                status: 'disconnected',
                peerConnection: undefined,
                dataChannel: undefined
            };
            this.emit('connection_change', this.#state.status);
            this._onClose();
        }
    }
    /**
     * Interrupt the current response if one is ongoing and clear the audio buffer so that the agent
     * stops talking.
     */ interrupt() {
        if (this.#ongoingResponse) {
            this.sendEvent({
                type: 'response.cancel'
            });
            this.#ongoingResponse = false;
        }
        this.sendEvent({
            type: 'output_audio_buffer.clear'
        });
    }
} //# sourceMappingURL=openaiRealtimeWebRtc.mjs.map
}),
"[project]/node_modules/@openai/agents-realtime/dist/shims/shims-node.mjs [app-route] (ecmascript) <locals>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "isBrowserEnvironment",
    ()=>isBrowserEnvironment,
    "useWebSocketProtocols",
    ()=>useWebSocketProtocols
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ws$2f$wrapper$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/ws/wrapper.mjs [app-route] (ecmascript) <locals>");
;
function isBrowserEnvironment() {
    return false;
}
const useWebSocketProtocols = false; //# sourceMappingURL=shims-node.mjs.map
}),
"[project]/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebsocket.mjs [app-route] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "OpenAIRealtimeWebSocket",
    ()=>OpenAIRealtimeWebSocket
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$shims$2f$shims$2d$node$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/shims/shims-node.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ws$2f$lib$2f$websocket$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__default__as__WebSocket$3e$__ = __turbopack_context__.i("[project]/node_modules/ws/lib/websocket.js [app-route] (ecmascript) <export default as WebSocket>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeBase$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/openaiRealtimeBase.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/utils.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/index.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$errors$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/errors.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeEvents$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/openaiRealtimeEvents.mjs [app-route] (ecmascript)");
;
;
;
;
;
class OpenAIRealtimeWebSocket extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeBase$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OpenAIRealtimeBase"] {
    #apiKey;
    #url;
    #state = {
        status: 'disconnected',
        websocket: undefined
    };
    #useInsecureApiKey;
    #currentItemId;
    #currentAudioContentIndex;
    /**
     * Timestamp maintained by the transport layer to aid with the calculation of the elapsed time
     * since the response started to compute the right interruption time.
     *
     * Mostly internal but might be used by extended transport layers for their interruption
     * calculation.
     */ _firstAudioTimestamp;
    _audioLengthMs = 0;
    #ongoingResponse = false;
    constructor(options = {}){
        super(options);
        this.#url = options.url;
        this.#useInsecureApiKey = options.useInsecureApiKey ?? false;
    }
    /**
     * The current status of the WebSocket connection.
     */ get status() {
        return this.#state.status;
    }
    /**
     * The current connection state of the WebSocket connection.
     */ get connectionState() {
        return this.#state;
    }
    /**
     * Always returns `null` as the WebSocket transport layer does not handle muting. Instead,
     * this should be handled by the client by not triggering the `sendAudio` method.
     */ get muted() {
        return null;
    }
    /**
     * The current item ID of the ongoing response.
     */ get currentItemId() {
        return this.#currentItemId;
    }
    /**
     * Triggers the `audio` event that a client might listen to to receive the audio buffer.
     * Protected for you to be able to override and disable emitting this event in case your extended
     * transport layer handles audio internally.
     *
     * @param audioEvent - The audio event to emit.
     */ _onAudio(audioEvent) {
        this.emit('audio', audioEvent);
    }
    #setupWebSocket(resolve, reject, sessionConfig) {
        if (this.#state.websocket) {
            resolve();
            return;
        }
        if (!this.#apiKey) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$errors$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UserError"]('API key is not set. Please call `connect()` with an API key first.');
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$shims$2f$shims$2d$node$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isBrowserEnvironment"])() && !this.#apiKey.startsWith('ek_') && !this.#useInsecureApiKey) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$errors$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UserError"]('Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.');
        }
        // browsers and workerd should use the protocols argument, node should use the headers argument
        const websocketArguments = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$shims$2f$shims$2d$node$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["useWebSocketProtocols"] ? [
            'realtime',
            // Auth
            'openai-insecure-api-key.' + this.#apiKey,
            // Version header
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["WEBSOCKET_META"]
        ] : {
            headers: {
                Authorization: `Bearer ${this.#apiKey}`,
                ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["HEADERS"]
            }
        };
        const ws = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$ws$2f$lib$2f$websocket$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__default__as__WebSocket$3e$__["WebSocket"](this.#url, websocketArguments);
        this.#state = {
            status: 'connecting',
            websocket: ws
        };
        this.emit('connection_change', this.#state.status);
        ws.addEventListener('open', ()=>{
            this.#state = {
                status: 'connected',
                websocket: ws
            };
            this.emit('connection_change', this.#state.status);
            this._onOpen();
            resolve();
        });
        ws.addEventListener('error', (error)=>{
            this._onError(error);
            this.#state = {
                status: 'disconnected',
                websocket: undefined
            };
            this.emit('connection_change', this.#state.status);
            reject(error);
        });
        ws.addEventListener('message', (message)=>{
            this._onMessage(message);
            const { data: parsed, isGeneric } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeEvents$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["parseRealtimeEvent"])(message);
            if (!parsed || isGeneric) {
                return;
            }
            if (parsed.type === 'response.output_audio.delta') {
                this.#currentAudioContentIndex = parsed.content_index;
                this.#currentItemId = parsed.item_id;
                if (this._firstAudioTimestamp === undefined) {
                    // If the response start timestamp is not set, we set it to the current time.
                    // This is used to calculate the elapsed time for interruption.
                    this._firstAudioTimestamp = Date.now();
                    this._audioLengthMs = 0;
                }
                const buff = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["base64ToArrayBuffer"])(parsed.delta);
                // calculate the audio length in milliseconds
                // GA format: session.audio.output.format supports structured { type: "audio/pcm", rate } or "audio/pcmu" etc.
                const fmt = this._rawSessionConfig?.audio?.output?.format;
                if (fmt && typeof fmt === 'object') {
                    // Structured format
                    const t = fmt.type;
                    if (t === 'audio/pcmu' || t === 'audio/pcma') {
                        // 8kHz, 1 byte per sample
                        this._audioLengthMs += buff.byteLength / 8;
                    } else if (t === 'audio/pcm') {
                        const rate = fmt.rate ?? 24000;
                        // bytes -> samples (2 bytes per sample) -> ms
                        this._audioLengthMs += buff.byteLength / 2 / rate * 1000;
                    } else {
                        // Fallback assumption similar to legacy
                        this._audioLengthMs += buff.byteLength / 24 / 2;
                    }
                } else if (typeof fmt === 'string') {
                    if (fmt.startsWith('g711_')) {
                        this._audioLengthMs += buff.byteLength / 8;
                    } else {
                        // Assume 24kHz PCM16
                        this._audioLengthMs += buff.byteLength / 24 / 2;
                    }
                } else {
                    // Default to 24kHz PCM16 behavior if unspecified
                    this._audioLengthMs += buff.byteLength / 24 / 2;
                }
                const audioEvent = {
                    type: 'audio',
                    data: buff,
                    responseId: parsed.response_id
                };
                this._onAudio(audioEvent);
            } else if (parsed.type === 'input_audio_buffer.speech_started') {
                const automaticResponseCancellationEnabled = this._rawSessionConfig?.audio?.input?.turn_detection?.interrupt_response ?? false;
                this.interrupt(!automaticResponseCancellationEnabled);
            } else if (parsed.type === 'response.created') {
                this.#ongoingResponse = true;
            } else if (parsed.type === 'response.done') {
                this.#ongoingResponse = false;
            } else if (parsed.type === 'session.created') {
                this._tracingConfig = parsed.session.tracing;
                // Trying to turn on tracing after the session is created
                this._updateTracingConfig(sessionConfig.tracing ?? 'auto');
            }
        });
        ws.addEventListener('close', ()=>{
            this.#state = {
                status: 'disconnected',
                websocket: undefined
            };
            this.emit('connection_change', this.#state.status);
            this._onClose();
        });
    }
    async connect(options) {
        const model = options.model ?? this.currentModel;
        this.currentModel = model;
        this.#apiKey = await this._getApiKey(options);
        const url = options.url ?? this.#url ?? `wss://api.openai.com/v1/realtime?model=${this.currentModel}`;
        this.#url = url;
        const sessionConfig = {
            ...options.initialSessionConfig || {},
            model: this.currentModel
        };
        await new Promise((resolve, reject)=>{
            try {
                this.#setupWebSocket(resolve, reject, sessionConfig);
            } catch (error) {
                reject(error);
            }
        });
        await this.updateSessionConfig(sessionConfig);
    }
    /**
     * Send an event to the Realtime API. This will stringify the event and send it directly to the
     * API. This can be used if you want to take control over the connection and send events manually.
     *
     * @param event - The event to send.
     */ sendEvent(event) {
        if (!this.#state.websocket) {
            throw new Error('WebSocket is not connected. Make sure you call `connect()` before sending events.');
        }
        this.#state.websocket.send(JSON.stringify(event));
    }
    /**
     * Close the WebSocket connection.
     *
     * This will also reset any internal connection tracking used for interruption handling.
     */ close() {
        this.#state.websocket?.close();
        this.#currentItemId = undefined;
        this._firstAudioTimestamp = undefined;
        this._audioLengthMs = 0;
        this.#currentAudioContentIndex = undefined;
    }
    /**
     * Will throw an error as the WebSocket transport layer does not support muting.
     */ mute(_muted) {
        throw new Error('Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.');
    }
    /**
     * Send an audio buffer to the Realtime API. This is used for your client to send audio to the
     * model to respond.
     *
     * @param audio - The audio buffer to send.
     * @param options - The options for the audio buffer.
     */ sendAudio(audio, options = {}) {
        if (this.#state.status === 'connected') {
            super.sendAudio(audio, options);
        }
    }
    /**
     * Send a cancel response event to the Realtime API. This is used to cancel an ongoing
     *  response that the model is currently generating.
     */ _cancelResponse() {
        // cancel the ongoing response
        if (this.#ongoingResponse) {
            this.sendEvent({
                type: 'response.cancel'
            });
            this.#ongoingResponse = false;
        }
    }
    /**
     * Do NOT call this method directly. Call `interrupt()` instead for proper interruption handling.
     *
     * This method is used to send the right events to the API to inform the model that the user has
     * interrupted the response. It might be overridden/extended by an extended transport layer. See
     * the `TwilioRealtimeTransportLayer` for an example.
     *
     * @param elapsedTime - The elapsed time since the response started.
     */ _interrupt(elapsedTime, cancelOngoingResponse = true) {
        if (elapsedTime < 0) {
            return;
        }
        // immediately emit this event so the client can stop playing audio
        if (cancelOngoingResponse) {
            this._cancelResponse();
        }
        const length = this._audioLengthMs ?? Number.POSITIVE_INFINITY;
        const audio_end_ms = Math.max(0, Math.min(Math.floor(elapsedTime), length));
        this.emit('audio_interrupted');
        this.sendEvent({
            type: 'conversation.item.truncate',
            item_id: this.#currentItemId,
            content_index: this.#currentAudioContentIndex,
            audio_end_ms
        });
    }
    /**
     * Interrupt the ongoing response. This method is triggered automatically by the client when
     * voice activity detection (VAD) is enabled (default) as well as when an output guardrail got
     * triggered.
     *
     * You can also call this method directly if you want to interrupt the conversation for example
     * based on an event in the client.
     */ interrupt(cancelOngoingResponse = true) {
        if (!this.#currentItemId || typeof this._firstAudioTimestamp !== 'number') {
            return;
        }
        const elapsedTime = Date.now() - this._firstAudioTimestamp;
        if (elapsedTime >= 0) {
            this._interrupt(elapsedTime, cancelOngoingResponse);
        }
        this.#currentItemId = undefined;
        this._firstAudioTimestamp = undefined;
        this._audioLengthMs = 0;
        this.#currentAudioContentIndex = undefined;
    }
} //# sourceMappingURL=openaiRealtimeWebsocket.mjs.map
}),
"[project]/node_modules/@openai/agents-realtime/dist/tool.mjs [app-route] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "BACKGROUND_RESULT_SYMBOL",
    ()=>BACKGROUND_RESULT_SYMBOL,
    "backgroundResult",
    ()=>backgroundResult,
    "isBackgroundResult",
    ()=>isBackgroundResult,
    "isValidRealtimeTool",
    ()=>isValidRealtimeTool,
    "toRealtimeToolDefinition",
    ()=>toRealtimeToolDefinition
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/index.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$errors$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/errors.mjs [app-route] (ecmascript)");
;
const BACKGROUND_RESULT_SYMBOL = Symbol('backgroundResult');
function backgroundResult(content) {
    return {
        [BACKGROUND_RESULT_SYMBOL]: true,
        content
    };
}
function isBackgroundResult(result) {
    return typeof result === 'object' && result !== null && BACKGROUND_RESULT_SYMBOL in result;
}
function isValidRealtimeTool(tool) {
    return tool.type === 'function' || tool.type === 'hosted_tool' && tool.name === 'hosted_mcp';
}
function toRealtimeToolDefinition(tool) {
    if (tool.type === 'function') {
        return tool;
    }
    if (tool.type === 'hosted_tool' && tool.name === 'hosted_mcp') {
        const serverUrl = tool.providerData.server_url && tool.providerData.server_url.length > 0 ? tool.providerData.server_url : undefined;
        return {
            type: 'mcp',
            server_label: tool.providerData.server_label,
            server_url: serverUrl,
            headers: tool.providerData.headers,
            allowed_tools: tool.providerData.allowed_tools,
            require_approval: tool.providerData.require_approval
        };
    }
    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$errors$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UserError"](`Invalid tool type: ${tool}`);
} //# sourceMappingURL=tool.mjs.map
}),
"[project]/node_modules/@openai/agents-realtime/dist/realtimeSession.mjs [app-route] (ecmascript)", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "RealtimeSession",
    ()=>RealtimeSession
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/index.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$handoff$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/handoff.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$errors$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/errors.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$runContext$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/runContext.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$items$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/items.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$shims$2f$shims$2d$node$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/shims/shims-node.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$events__$5b$external$5d$__$28$node$3a$events$2c$__cjs$29$__$3c$export__EventEmitter__as__RuntimeEventEmitter$3e$__ = __turbopack_context__.i("[externals]/node:events [external] (node:events, cjs) <export EventEmitter as RuntimeEventEmitter>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$utils$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/utils/index.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/utils/typeGuards.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$utils$2f$smartString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/utils/smartString.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$guardrail$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/guardrail.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeWebRtc$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebRtc.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeWebsocket$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebsocket.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/utils.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/logger.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$tool$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/tool.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
class RealtimeSession extends __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$events__$5b$external$5d$__$28$node$3a$events$2c$__cjs$29$__$3c$export__EventEmitter__as__RuntimeEventEmitter$3e$__["RuntimeEventEmitter"] {
    initialAgent;
    options;
    #transport;
    #currentAgent;
    #currentTools;
    #context;
    #outputGuardrails = [];
    #outputGuardrailSettings;
    #transcribedTextDeltas = {};
    #history = [];
    #shouldIncludeAudioData;
    #interruptedByGuardrail = {};
    #audioStarted = false;
    // Tracks all MCP tools fetched per server label (from mcp_list_tools results).
    #allMcpToolsByServer = new Map();
    // Tracks currently available MCP tools based on the active agent's configured server_labels.
    #availableMcpTools = [];
    // Keeps track of the last full session config we sent (camelCase keys) so that
    // subsequent updates (e.g. during agent handoffs) preserve properties that are
    // not explicitly recalculated here (such as inputAudioFormat, outputAudioFormat,
    // modalities, speed, toolChoice, turnDetection, etc.). Without this, updating
    // the agent would drop audio format overrides (e.g. g711_ulaw) and revert to
    // transport defaults causing issues for integrations like Twilio.
    #lastSessionConfig = null;
    #automaticallyTriggerResponseForMcpToolCalls = true;
    constructor(initialAgent, options = {}){
        super();
        this.initialAgent = initialAgent;
        this.options = options;
        if (typeof options.transport === 'undefined' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["hasWebRTCSupport"])() || options.transport === 'webrtc') {
            this.#transport = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeWebRtc$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OpenAIRealtimeWebRTC"]();
        } else if (options.transport === 'websocket' || typeof options.transport === 'undefined') {
            this.#transport = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeWebsocket$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OpenAIRealtimeWebSocket"]();
        } else {
            this.#transport = options.transport;
        }
        this.#currentAgent = initialAgent;
        this.#context = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$runContext$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RunContext"]({
            ...options.context ?? {},
            history: this.#history
        });
        this.#outputGuardrails = (options.outputGuardrails ?? []).map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$guardrail$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["defineRealtimeOutputGuardrail"]);
        this.#outputGuardrailSettings = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$guardrail$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getRealtimeGuardrailSettings"])(options.outputGuardrailSettings ?? {});
        this.#shouldIncludeAudioData = options.historyStoreAudio ?? false;
        this.#automaticallyTriggerResponseForMcpToolCalls = options.automaticallyTriggerResponseForMcpToolCalls ?? true;
    }
    /**
     * The transport layer used by the session.
     */ get transport() {
        return this.#transport;
    }
    /**
     * The current agent in the session.
     */ get currentAgent() {
        return this.#currentAgent;
    }
    /**
     * The current usage of the session.
     */ get usage() {
        return this.#context.usage;
    }
    /**
     * The current context of the session.
     */ get context() {
        return this.#context;
    }
    /**
     * Whether the session is muted. Might be `null` if the underlying transport layer does not
     * support muting.
     */ get muted() {
        return this.#transport.muted;
    }
    /**
     * The history of the session.
     */ get history() {
        return this.#history;
    }
    get availableMcpTools() {
        return this.#availableMcpTools;
    }
    async #setCurrentAgent(agent) {
        this.#currentAgent = agent;
        const handoffs = this.#currentAgent.handoffs.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$handoff$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getHandoff"]);
        const handoffTools = handoffs.map((handoff)=>handoff.getHandoffAsFunctionTool());
        const allTools = (await this.#currentAgent.getAllTools(this.#context)).filter(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$tool$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isValidRealtimeTool"]).map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$tool$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toRealtimeToolDefinition"]);
        const hasToolsDefined = typeof this.#currentAgent.tools !== 'undefined' || typeof this.#currentAgent.mcpServers !== 'undefined';
        const hasHandoffsDefined = handoffs.length > 0;
        this.#currentTools = hasToolsDefined || hasHandoffsDefined ? [
            ...allTools,
            ...handoffTools
        ] : undefined;
        // Recompute currently available MCP tools based on the new agent's active server labels.
        this.#updateAvailableMcpTools();
    }
    async #getSessionConfig(additionalConfig = {}) {
        const instructions = await this.#currentAgent.getSystemPrompt(this.#context);
        const tracingConfig = this.options.tracingDisabled ? null : this.options.workflowName ? {
            workflow_name: this.options.workflowName
        } : 'auto';
        if (tracingConfig !== null && tracingConfig !== 'auto') {
            if (this.options.groupId) {
                tracingConfig.group_id = this.options.groupId;
            }
            if (this.options.traceMetadata) {
                tracingConfig.metadata = this.options.traceMetadata;
            }
        } else if (this.options.groupId || this.options.traceMetadata) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].warn('In order to set traceMetadata or a groupId you need to specify a workflowName.');
        }
        // Start from any previously-sent config (so we preserve values like audio formats)
        // and the original options.config provided by the user. Preference order:
        // 1. Last session config we sent (#lastSessionConfig)
        // 2. Original options.config
        // 3. Additional config passed into this invocation (explicit overrides)
        // Finally we overwrite dynamic fields (instructions, voice, model, tools, tracing)
        // to ensure they always reflect the current agent & runtime state.
        const base = {
            ...this.#lastSessionConfig ?? {},
            ...this.options.config ?? {},
            ...additionalConfig ?? {}
        };
        // Note: Certain fields cannot be updated after the session begins, such as voice and model
        const fullConfig = {
            ...base,
            instructions,
            voice: this.#currentAgent.voice,
            model: this.options.model,
            tools: this.#currentTools,
            tracing: tracingConfig,
            prompt: typeof this.#currentAgent.prompt === 'function' ? await this.#currentAgent.prompt(this.#context, this.#currentAgent) : this.#currentAgent.prompt
        };
        // Update our cache so subsequent updates inherit the full set including any
        // dynamic fields we just overwrote.
        this.#lastSessionConfig = fullConfig;
        return fullConfig;
    }
    async updateAgent(newAgent) {
        this.#currentAgent.emit('agent_handoff', this.#context, newAgent);
        this.emit('agent_handoff', this.#context, this.#currentAgent, newAgent);
        await this.#setCurrentAgent(newAgent);
        await this.#transport.updateSessionConfig(await this.#getSessionConfig());
        return newAgent;
    }
    async #handleHandoff(toolCall, handoff) {
        const newAgent = await handoff.onInvokeHandoff(this.#context, toolCall.arguments);
        this.#currentAgent.emit('agent_handoff', this.#context, newAgent);
        this.emit('agent_handoff', this.#context, this.#currentAgent, newAgent);
        // update session with new agent
        await this.#setCurrentAgent(newAgent);
        await this.#transport.updateSessionConfig(await this.#getSessionConfig());
        const output = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$handoff$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getTransferMessage"])(newAgent);
        this.#transport.sendFunctionCallOutput(toolCall, output, true);
        return newAgent;
    }
    async #handleFunctionToolCall(toolCall, tool) {
        this.#context.context.history = JSON.parse(JSON.stringify(this.#history)); // deep copy of the history
        let parsedArgs = toolCall.arguments;
        if (tool.parameters) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$utils$2f$typeGuards$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isZodObject"])(tool.parameters)) {
                parsedArgs = tool.parameters.parse(parsedArgs);
            } else {
                parsedArgs = JSON.parse(parsedArgs);
            }
        }
        const needsApproval = await tool.needsApproval(this.#context, parsedArgs, toolCall.callId);
        if (needsApproval) {
            const approval = this.context.isToolApproved({
                toolName: tool.name,
                callId: toolCall.callId
            });
            if (approval === false) {
                this.emit('agent_tool_start', this.#context, this.#currentAgent, tool, {
                    toolCall
                });
                this.#currentAgent.emit('agent_tool_start', this.#context, tool, {
                    toolCall
                });
                const result = 'Tool execution was not approved.';
                this.#transport.sendFunctionCallOutput(toolCall, result, true);
                this.emit('agent_tool_end', this.#context, this.#currentAgent, tool, result, {
                    toolCall
                });
                this.#currentAgent.emit('agent_tool_end', this.#context, tool, result, {
                    toolCall
                });
                return;
            } else if (typeof approval === 'undefined') {
                this.emit('tool_approval_requested', this.#context, this.#currentAgent, {
                    type: 'function_approval',
                    tool,
                    approvalItem: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$items$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RunToolApprovalItem"](toolCall, this.#currentAgent)
                });
                return;
            }
        }
        this.emit('agent_tool_start', this.#context, this.#currentAgent, tool, {
            toolCall
        });
        this.#currentAgent.emit('agent_tool_start', this.#context, tool, {
            toolCall
        });
        this.#context.context.history = JSON.parse(JSON.stringify(this.#history)); // deep copy of the history
        const result = await tool.invoke(this.#context, toolCall.arguments, {
            toolCall
        });
        let stringResult;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$tool$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isBackgroundResult"])(result)) {
            // Don't generate a new response, just send the result
            stringResult = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$utils$2f$smartString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toSmartString"])(result.content);
            this.#transport.sendFunctionCallOutput(toolCall, stringResult, false);
        } else {
            stringResult = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$utils$2f$smartString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toSmartString"])(result);
            this.#transport.sendFunctionCallOutput(toolCall, stringResult, true);
        }
        this.emit('agent_tool_end', this.#context, this.#currentAgent, tool, stringResult, {
            toolCall
        });
        this.#currentAgent.emit('agent_tool_end', this.#context, tool, stringResult, {
            toolCall
        });
    }
    async #handleFunctionCall(toolCall) {
        const handoffMap = new Map(this.#currentAgent.handoffs.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$handoff$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getHandoff"]).map((handoff)=>[
                handoff.toolName,
                handoff
            ]));
        const allTools = await this.#currentAgent.getAllTools(this.#context);
        const functionToolMap = new Map(allTools.map((tool)=>[
                tool.name,
                tool
            ]));
        const possibleHandoff = handoffMap.get(toolCall.name);
        if (possibleHandoff) {
            await this.#handleHandoff(toolCall, possibleHandoff);
        } else {
            const functionTool = functionToolMap.get(toolCall.name);
            if (functionTool && functionTool.type === 'function') {
                await this.#handleFunctionToolCall(toolCall, functionTool);
            } else {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$errors$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ModelBehaviorError"](`Tool ${toolCall.name} not found`);
            }
        }
    }
    async #runOutputGuardrails(output, responseId, itemId) {
        if (this.#outputGuardrails.length === 0) {
            return;
        }
        const guardrailArgs = {
            agent: this.#currentAgent,
            agentOutput: output,
            context: this.#context
        };
        const results = await Promise.all(this.#outputGuardrails.map((guardrail)=>guardrail.run(guardrailArgs)));
        const firstTripwireTriggered = results.find((result)=>result.output.tripwireTriggered);
        if (firstTripwireTriggered) {
            // this ensures that if one guardrail already trips and we are in the middle of another
            // guardrail run, we don't trip again
            if (this.#interruptedByGuardrail[responseId]) {
                return;
            }
            this.#interruptedByGuardrail[responseId] = true;
            const error = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$errors$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OutputGuardrailTripwireTriggered"](`Output guardrail triggered: ${JSON.stringify(firstTripwireTriggered.output.outputInfo)}`, firstTripwireTriggered);
            this.emit('guardrail_tripped', this.#context, this.#currentAgent, error, {
                itemId
            });
            this.interrupt();
            const feedbackText = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$guardrail$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getRealtimeGuardrailFeedbackMessage"])(firstTripwireTriggered);
            this.sendMessage(feedbackText);
            return;
        }
    }
    #setEventListeners() {
        this.#transport.on('*', (event)=>{
            this.emit('transport_event', event);
            // Handle completed user transcription events
            if (event.type === 'conversation.item.input_audio_transcription.completed') {
                try {
                    const completedEvent = event;
                    this.#history = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["updateRealtimeHistory"])(this.#history, completedEvent, this.#shouldIncludeAudioData);
                    this.#context.context.history = this.#history;
                    this.emit('history_updated', this.#history);
                } catch (err) {
                    this.emit('error', {
                        type: 'error',
                        error: err
                    });
                }
            }
        });
        this.#transport.on('mcp_tools_listed', ({ serverLabel, tools })=>{
            try {
                this.#allMcpToolsByServer.set(serverLabel, tools ?? []);
                this.#updateAvailableMcpTools();
            } catch (err) {
                this.emit('error', {
                    type: 'error',
                    error: err
                });
            }
        });
        this.#transport.on('audio', (event)=>{
            if (!this.#audioStarted) {
                this.#audioStarted = true;
                this.emit('audio_start', this.#context, this.#currentAgent);
            }
            this.emit('audio', event);
        });
        this.#transport.on('turn_started', ()=>{
            this.#audioStarted = false;
            this.emit('agent_start', this.#context, this.#currentAgent);
            this.#currentAgent.emit('agent_start', this.#context, this.#currentAgent);
        });
        this.#transport.on('turn_done', (event)=>{
            const item = event.response.output[event.response.output.length - 1];
            const textOutput = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getLastTextFromAudioOutputMessage"])(item) ?? '';
            const itemId = item?.id ?? '';
            this.emit('agent_end', this.#context, this.#currentAgent, textOutput);
            this.#currentAgent.emit('agent_end', this.#context, textOutput);
            this.#runOutputGuardrails(textOutput, event.response.id, itemId);
        });
        this.#transport.on('audio_done', ()=>{
            if (this.#audioStarted) {
                this.#audioStarted = false;
            }
            this.emit('audio_stopped', this.#context, this.#currentAgent);
        });
        let lastRunIndex = 0;
        let lastItemId;
        this.#transport.on('audio_transcript_delta', (event)=>{
            try {
                const delta = event.delta;
                const itemId = event.itemId;
                const responseId = event.responseId;
                if (lastItemId !== itemId) {
                    lastItemId = itemId;
                    lastRunIndex = 0;
                }
                const currentText = this.#transcribedTextDeltas[itemId] ?? '';
                const newText = currentText + delta;
                this.#transcribedTextDeltas[itemId] = newText;
                if (this.#outputGuardrailSettings.debounceTextLength < 0) {
                    return;
                }
                const newRunIndex = Math.floor(newText.length / this.#outputGuardrailSettings.debounceTextLength);
                if (newRunIndex > lastRunIndex) {
                    lastRunIndex = newRunIndex;
                    // We don't cancel existing runs because we want the first one to fail to fail
                    // The transport layer should upon failure handle the interruption and stop the model
                    // from generating further
                    this.#runOutputGuardrails(newText, responseId, itemId);
                }
            } catch (err) {
                this.emit('error', {
                    type: 'error',
                    error: err
                });
            }
        });
        this.#transport.on('item_update', (event)=>{
            try {
                const isNew = !this.#history.some((item)=>item.itemId === event.itemId);
                this.#history = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["updateRealtimeHistory"])(this.#history, event, this.#shouldIncludeAudioData);
                this.#context.context.history = this.#history;
                if (isNew) {
                    const addedItem = this.#history.find((item)=>item.itemId === event.itemId);
                    if (addedItem) {
                        this.emit('history_added', addedItem);
                    }
                }
                this.emit('history_updated', this.#history);
            } catch (err) {
                this.emit('error', {
                    type: 'error',
                    error: err
                });
            }
        });
        this.#transport.on('item_deleted', (event)=>{
            try {
                this.#history = this.#history.filter((item)=>item.itemId !== event.itemId);
                this.#context.context.history = this.#history;
                this.emit('history_updated', this.#history);
            } catch (err) {
                this.emit('error', {
                    type: 'error',
                    error: err
                });
            }
        });
        this.#transport.on('function_call', async (event)=>{
            try {
                await this.#handleFunctionCall(event);
            } catch (error) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].error('Error handling function call', error);
                this.emit('error', {
                    type: 'error',
                    error
                });
            }
        });
        this.#transport.on('usage_update', (usage)=>{
            this.#context.usage.add(usage);
        });
        this.#transport.on('audio_interrupted', ()=>{
            if (this.#audioStarted) {
                this.#audioStarted = false;
            }
            this.emit('audio_interrupted', this.#context, this.#currentAgent);
        });
        this.#transport.on('error', (error)=>{
            this.emit('error', error);
        });
        this.#transport.on('mcp_tool_call_completed', (toolCall)=>{
            this.emit('mcp_tool_call_completed', this.#context, this.#currentAgent, toolCall);
            if (this.#automaticallyTriggerResponseForMcpToolCalls) {
                this.#transport.sendEvent({
                    type: 'response.create'
                });
            }
        });
        this.#transport.on('mcp_approval_request', (approvalRequest)=>{
            this.emit('tool_approval_requested', this.#context, this.#currentAgent, {
                type: 'mcp_approval_request',
                approvalItem: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["realtimeApprovalItemToApprovalItem"])(this.#currentAgent, approvalRequest)
            });
        });
    }
    /**
     * Recomputes the currently available MCP tools based on the current agent's active
     * MCP server configurations and the cached per-server tool listings. Emits
     * `mcp_tools_changed` if the set changed.
     */ #updateAvailableMcpTools() {
        // Collect active MCP server labels and optional allowed filters from the current agent
        const activeMcpConfigs = this.#currentTools?.filter((t)=>t.type === 'mcp');
        const allowedFromConfig = (cfg)=>{
            const allowed = cfg.allowed_tools;
            if (!allowed) return undefined;
            if (Array.isArray(allowed)) return allowed;
            if (allowed && Array.isArray(allowed.tool_names)) return allowed.tool_names;
            return undefined;
        };
        const dedupByName = new Map();
        for (const cfg of activeMcpConfigs){
            const tools = this.#allMcpToolsByServer.get(cfg.server_label) ?? [];
            const allowed = allowedFromConfig(cfg);
            for (const tool of tools){
                if (allowed && !allowed.includes(tool.name)) continue;
                if (!dedupByName.has(tool.name)) {
                    dedupByName.set(tool.name, tool);
                }
            }
        }
        const next = Array.from(dedupByName.values());
        const prev = this.#availableMcpTools;
        const changed = prev.length !== next.length || JSON.stringify(prev.map((t)=>t.name).sort()) !== JSON.stringify(next.map((t)=>t.name).sort());
        if (changed) {
            this.#availableMcpTools = next;
            this.emit('mcp_tools_changed', this.#availableMcpTools);
        }
    }
    /**
     * Connect to the session. This will establish the connection to the underlying transport layer
     * and start the session.
     *
     * After connecting, the session will also emit a `history_updated` event with an empty history.
     *
     * @param options - The options for the connection.
     */ async connect(options) {
        // makes sure the current agent is correctly set and loads the tools
        await this.#setCurrentAgent(this.initialAgent);
        this.#setEventListeners();
        await this.#transport.connect({
            apiKey: options.apiKey ?? this.options.apiKey,
            model: this.options.model,
            url: options.url,
            initialSessionConfig: await this.#getSessionConfig(this.options.config)
        });
        // Ensure the cached lastSessionConfig includes everything passed as the initial session config
        // (the call above already set it via #getSessionConfig but in case additional overrides were
        // passed directly here in the future we could merge them). For now it's a no-op.
        this.#history = [];
        this.emit('history_updated', this.#history);
    }
    /**
     * Update the history of the session.
     * @param newHistory - The new history to set.
     */ updateHistory(newHistory) {
        let updatedHistory;
        if (typeof newHistory === 'function') {
            updatedHistory = newHistory(this.#history);
        } else {
            updatedHistory = newHistory;
        }
        this.#transport.resetHistory(this.#history, updatedHistory);
    }
    /**
     * Send a message to the session.
     * @param message - The message to send.
     * @param otherEventData - Additional event data to send.
     */ sendMessage(message, otherEventData = {}) {
        this.#transport.sendMessage(message, otherEventData);
    }
    /**
     * Add image to the session
     * @param image - The image to add.
     */ addImage(image, { triggerResponse = true } = {}) {
        this.#transport.addImage(image, {
            triggerResponse
        });
    }
    /**
     * Mute the session.
     * @param muted - Whether to mute the session.
     */ mute(muted) {
        this.#transport.mute(muted);
    }
    /**
     * Disconnect from the session.
     */ close() {
        this.#interruptedByGuardrail = {};
        this.#transport.close();
    }
    /**
     * Send audio to the session.
     * @param audio - The audio to send.
     * @param options - Additional options.
     * @param options.commit - Whether to finish the turn with this audio.
     */ sendAudio(audio, options = {}) {
        this.#transport.sendAudio(audio, options);
    }
    /**
     * Interrupt the session artificially for example if you want to build a "stop talking"
     * button.
     */ interrupt() {
        this.#transport.interrupt();
    }
    /**
     * Approve a tool call. This will also trigger the tool call to the agent.
     * @param approvalItem - The approval item to approve.
     * @param options - Additional options.
     * @param options.alwaysApprove - Whether to always approve the tool call.
     */ async approve(approvalItem, options = {
        alwaysApprove: false
    }) {
        this.#context.approveTool(approvalItem, options);
        const tool = this.#currentAgent.tools.find((tool)=>tool.name === approvalItem.rawItem.name);
        if (tool && tool.type === 'function' && approvalItem.rawItem.type === 'function_call') {
            await this.#handleFunctionToolCall(approvalItem.rawItem, tool);
        } else if (approvalItem.rawItem.type === 'hosted_tool_call') {
            if (options.alwaysApprove) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].warn('Always approving MCP tools is not supported. Use the allowed tools configuration instead.');
            }
            const mcpApprovalRequest = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["approvalItemToRealtimeApprovalItem"])(approvalItem);
            this.#transport.sendMcpResponse(mcpApprovalRequest, true);
        } else {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$errors$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ModelBehaviorError"](`Tool ${approvalItem.rawItem.name} not found`);
        }
    }
    /**
     * Reject a tool call. This will also trigger the tool call to the agent.
     * @param approvalItem - The approval item to reject.
     * @param options - Additional options.
     * @param options.alwaysReject - Whether to always reject the tool call.
     */ async reject(approvalItem, options = {
        alwaysReject: false
    }) {
        this.#context.rejectTool(approvalItem, options);
        // we still need to simulate a tool call to the agent to let the agent know
        const tool = this.#currentAgent.tools.find((tool)=>tool.name === approvalItem.rawItem.name);
        if (tool && tool.type === 'function' && approvalItem.rawItem.type === 'function_call') {
            await this.#handleFunctionToolCall(approvalItem.rawItem, tool);
        } else if (approvalItem.rawItem.type === 'hosted_tool_call') {
            if (options.alwaysReject) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$logger$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"].warn('Always rejecting MCP tools is not supported. Use the allowed tools configuration instead.');
            }
            const mcpApprovalRequest = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["approvalItemToRealtimeApprovalItem"])(approvalItem);
            this.#transport.sendMcpResponse(mcpApprovalRequest, false);
        } else {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$errors$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ModelBehaviorError"](`Tool ${approvalItem.rawItem.name} not found`);
        }
    }
} //# sourceMappingURL=realtimeSession.mjs.map
}),
"[project]/node_modules/@openai/agents-realtime/dist/index.mjs [app-route] (ecmascript) <locals>", ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s([
    "utils",
    ()=>utils
]);
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/utils.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$realtimeAgent$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/realtimeAgent.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$realtimeSession$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/realtimeSession.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeWebRtc$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebRtc.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeWebsocket$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/openaiRealtimeWebsocket.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$openaiRealtimeBase$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/openaiRealtimeBase.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$core$2f$dist$2f$index$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-core/dist/index.mjs [app-route] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$tool$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@openai/agents-realtime/dist/tool.mjs [app-route] (ecmascript)"); //# sourceMappingURL=index.mjs.map
;
;
;
;
;
;
const utils = {
    base64ToArrayBuffer: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["base64ToArrayBuffer"],
    arrayBufferToBase64: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["arrayBufferToBase64"],
    getLastTextFromAudioOutputMessage: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$openai$2f$agents$2d$realtime$2f$dist$2f$utils$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getLastTextFromAudioOutputMessage"]
};
;
;
}),
];

//# sourceMappingURL=node_modules_%40openai_agents-realtime_dist_d036d0ac._.js.map